<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chrome | My Octopress Blog]]></title>
  <link href="http://windfire-cd.github.com/blog/categories/chrome/atom.xml" rel="self"/>
  <link href="http://windfire-cd.github.com/"/>
  <updated>2012-09-19T15:11:04+08:00</updated>
  <id>http://windfire-cd.github.com/</id>
  <author>
    <name><![CDATA[windfire.cd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[chrome启动流程]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/17/chromeqi-dong-liu-cheng/"/>
    <updated>2012-09-17T15:44:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/17/chromeqi-dong-liu-cheng</id>
    <content type="html"><![CDATA[<h2>主函数</h2>

<p>在<em>src/chrome/app/</em>中，对应于不同平台存在不同的主函数入口文件，比如</p>

<ul>
<li><em>chrome_exe_main_gtk.cc</em></li>
<li><em>chrmoe_exe_main_win.cc</em></li>
<li><em>chrome_exe_main_mac.cc</em></li>
</ul>


<p>以<em>chrome_exe_main_gtk.cc</em>为例</p>

<p>```cpp chrome_exe_main_gtk.cc</p>

<h1>include "build/build_config.h"</h1>

<p>// The entry point for all invocations of Chromium, browser and renderer. On
// windows, this does nothing but load chrome.dll and invoke its entry point in
// order to make it easy to update the app from GoogleUpdate. We don't need
// that extra layer with on linux.</p>

<p>extern "C" {</p>

<pre><code>int ChromeMain(int argc, const char** argv);
</code></pre>

<p>}</p>

<p>int main(int argc, const char** argv) {</p>

<pre><code>  return ChromeMain(argc, argv);
</code></pre>

<p>}
```</p>

<p>其中ChromeMain(int,char*[])定义在同一目录下的chrome_main.cc中</p>

<p>```cpp chrome_main.cc</p>

<h1>include "chrome/app/chrome_main_delegate.h"</h1>

<h1>include "content/public/app/content_main.h"</h1>

<h1>if defined(OS_WIN)</h1>

<h1>define DLLEXPORT __declspec(dllexport)</h1>

<p>// We use extern C for the prototype DLLEXPORT to avoid C++ name mangling.
extern "C" {
DLLEXPORT int __cdecl ChromeMain(HINSTANCE instance,
sandbox::SandboxInterfaceInfo* sandbox_info);
}</p>

<h1>elif defined(OS_POSIX)</h1>

<p>extern "C" {
<strong>attribute</strong>((visibility("default")))
int ChromeMain(int argc, const char** argv);
}</p>

<h1>endif</h1>

<h1>if defined(OS_WIN)</h1>

<p>DLLEXPORT int __cdecl ChromeMain(HINSTANCE instance,
sandbox::SandboxInterfaceInfo* sandbox_info) {
ChromeMainDelegate chrome_main_delegate;
return content::ContentMain(instance, sandbox_info, &amp;chrome_main_delegate);</p>

<h1>elif defined(OS_POSIX)</h1>

<p>int ChromeMain(int argc, const char** argv) {
ChromeMainDelegate chrome_main_delegate;
return content::ContentMain(argc, argv, &amp;chrome_main_delegate);</p>

<h1>endif</h1>

<p>}
```
<em>ChromeMainDelegate</em>继承自<em>ContentMainDelegate</em>主要提供启动相关函数以及进程
调用处理。其只是将父类函数提供一个简单的实现</p>

<p>其中<em>content::ContentMain(argc, argv, &amp;chrome_main_delegate);</em>
负责主要循环，初始化环境，启动Run函数，退出并返回错误值，其定义如下</p>

<p>```cpp content_main.cc</p>

<h1>include "content/public/app/content_main.h"</h1>

<h1>include "base/memory/scoped_ptr.h"</h1>

<h1>include "content/public/app/content_main_runner.h"</h1>

<p>namespace content {</p>

<h1>if defined(OS_WIN)</h1>

<p>int ContentMain(HINSTANCE instance,</p>

<pre><code>            sandbox::SandboxInterfaceInfo* sandbox_info,
                            ContentMainDelegate* delegate) {
</code></pre>

<h1>else</h1>

<pre><code>int ContentMain(int argc,
                const char** argv,
                                ContentMainDelegate* delegate) {
</code></pre>

<h1>endif  // OS_WIN</h1>

<pre><code>      scoped_ptr&lt;ContentMainRunner&gt; main_runner(ContentMainRunner::Create());

        int exit_code;
</code></pre>

<h1>if defined(OS_WIN)</h1>

<p>  exit_code = main_runner->Initialize(instance, sandbox_info, delegate);</p>

<h1>else</h1>

<pre><code>exit_code = main_runner-&gt;Initialize(argc, argv, delegate);
</code></pre>

<h1>endif  // OS_WIN</h1>

<pre><code>  if (exit_code &gt;= 0)
          return exit_code;

            exit_code = main_runner-&gt;Run();

              main_runner-&gt;Shutdown();

                return exit_code;
}
</code></pre>

<p>}  // namespace content
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrommium如何显示网页]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/14/chrommiumru-he-xian-shi-wang-ye/"/>
    <updated>2012-09-14T14:49:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/14/chrommiumru-he-xian-shi-wang-ye</id>
    <content type="html"><![CDATA[<h2>涉及模块</h2>

<ul>
<li>WebKit: html渲染引擎</li>
<li>Glue: 将WebKit的对应类型转化为chromium对应类型，被称为"Webkit嵌入层"它是chromium和<em>test_shell</em>(可以测试webkit)的基础</li>
<li>Renderer/Render host: chromium的多进程嵌入层，负责browser进程和render进程间的通知和命令</li>
<li>WebContent: 方便整合多个沙盒进程中渲染html为一个完整的画面</li>
<li>TabContentWrapper： 包含一个完整的WebContent实例，并且包含一个插件接口</li>
<li>Browser：浏览器窗口，包含多个TabContentWrapper</li>
</ul>


<h2>WebKit</h2>

<p>用来渲染web页面，源码位置为<em>/third_party/WebKit</em>。WebKit包含一个"WebCore"和一个"JavaScriptCore"，后者主要用来测试，一般使用V8对其
替换。"WebCore"作为核心渲染引擎，在chromium中并不是像safari一样用"WebKit"的原生的接口，只是为了方便称为"WebKit"层。</p>

<h3>WebKit Port</h3>

<p>底层包含google实现的基于系统的底层"port"，部分代码并不是平台相关的，可以认为是"WebCore"的一部分，但是比如字体渲染等操作必须用各个
平台自己的方式。</p>

<ul>
<li><p>网络通信主要是通过chromium的<a href="http://www.chromium.org/developers/design-documents/multi-process-resource-loading">multi-process resource loading</a>
来实现的，而不是由render进程直接通过系统调用来实现</p></li>
<li><p>利用来自android的跨平台图形库Skia渲染除字体外的画面。代码位于 <em>/third_party/skia</em>其入口是<em>/webkit/port/platform/graphics/GraphicsContextSkia.cpp</em></p></li>
</ul>


<h3>WebKit Glue</h3>

<p>Glue为WebKit的类型和接口提供了一层封装(比如用std::string 代替 WebCore::String)，所有的chromium代码基于glue，这样方便统一类型以及风格
并且减少WebKit的类型以及API变动为chromium带来的问题</p>

<p>"test shell" 提供了一个原生的调用WebKit的方式，它的调用方式和Chromium通过glue调用WebKit完全一致，可以用来进行测试新代码，减少chromium
架构上许多特性，线程或者进程的干扰。它还可以作为WebKit的一个自动化测试工具。但是"test shell" 下行方面和chromium的多进程方式不同，
它在每个shell中单独集成一个"content shell"</p>

<h2>Render进程</h2>

<p><img src="http://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome/Renderingintherenderer-v2.png"></p>

<p>render进程基于glue集成webkit port，代码量不大，主要是通过IPC接收主进程的任务。最重要的类是RenderView，位于<em>/content/renderer/render_view_impl.cc</em>
类的对象代表了一个web页面，处理来自主进程的浏览命令，该类继承自RenderWidget，RenderWidget提供了绘制和事件处理接口。RenderView通过
render进程中的RenderProcess对象和主进程交互</p>

<p>RenderWidget实现了glue的一个抽象接口WebWidgetDelegate， 对应于 WebCore::Widget。这是一个基础的显示并处理事件的窗口。RenderView继承自
RenderWidget，并且显示一个tab内的内容或者弹出窗口。对于chromium来说RenderWidget不依赖RenderView存在的唯一情况是web页面的选择窗口。</p>

<h3>render线程</h3>

<p>每个render包含两个线程，其中render  thread运行RenderView和WebKit代码，还有一个main thread负责IPC。render thread和外部通信，首先将
消息发送给render中的main thread，然后交给browser进程。所以它和browser之间可以是同步的</p>

<h2>Browser进程</h2>

<p><img src="http://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome/rendering%20browser.png"></p>

<h3>browser进程的底层处理</h3>

<p>browser分为UI线程和IPC线程，IPC线程负责处理browser和render进程间的通信，并且管理外部网络链接。UI线程一旦创建一个RenderProcessHost
则同时在IPC线程内创建一个新的ChannelProxy IPC对象，render通过该对象内的PIPE通道和UI线程进行通信。该对象内存在ResourceMessageFilter可以处理
网络请求。该功能位于ResourceMessageFilter::OnMessageReceived.</p>

<p>UI线程内的RenderProcessHost对象负责给对应的render发送界面相关消息，该功能位于RenderProcessHost::OnMessageReceived.</p>

<h3>browser进程的高层处理</h3>

<p>和界面相关的消息大部分在RenderViewHost::OnMessageReceived被处理，剩下的发送给RenderWidgetHost基类，对应于render进程内的RenderView and the RenderWidget
各平台都有自己的显示实现(RenderWidgetHostView[Aura|Gtk|Mac|Win])</p>

<p>在RenderView/Widget上层是WebContents对象，多数消息在这一层被函数响应。一个WebContents对应于一个webpage.它是内容模块的最高层。负责显示
标签内的内容，每个WebContents包含于一个TabContentsWrapper内，对应于chrome内的一个tab。</p>

<h2>举例</h2>

<h3>设置光标的流程</h3>

<p><strong>对于render进程来说</strong></p>

<ul>
<li>WebKit内部生成光标设置消息。该消息通过<em>content/renderer/render_widget.cc</em>内的RenderWidget::SetCursor被发出</li>
<li>调用RenderView内的RenderWidget::Send分配该消息，然后通过RenderThread::Send将消息从render进程发送给browser进程</li>
<li>然后调用render进程内的main thread的IPC::SyncChannel，将消息添加到指定的pipe中</li>
</ul>


<p><strong>对于browser进程来说</strong></p>

<ul>
<li>RenderProcessHost内的IPC::ChannelProxy通过IPC线程接收该消息。首先通过ResourceMessageFilter过滤是网络消息还是从底层传来的，由于消息
不是网络消息，没有被过滤，被传送给UI线程</li>
<li><em>content/browser/renderer_host/render_process_host_impl.cc</em>中的RenderProcessHost::OnMessageReceived 接收到该消息，处理几类消息后
将其他消息传送给消息来源的RenderView对应的RenderViewHost。</li>
<li><em>content/browser/renderer_host/render_view_host_impl.cc</em>内的RenderViewHost::OnMessageReceived接收到该消息，许多消息在此被处理，但是
这个消息会继续被传递给RenderWidget</li>
<li><em>content/browser/renderer_host/render_view_host_impl.cc</em>存有消息字典以及对应的处理函数RenderWidgetHost::OnMsgSetCursor，然后被特定的
UI函数处理</li>
</ul>


<h3>鼠标点击的流程</h3>

<p><strong>对于browser进程来说</strong></p>

<ul>
<li>UI线程内的RenderWidgetHostViewWin::OnMouseEvent捕捉到窗口消息，然后调用ForwardMouseEventToRenderer</li>
<li>上个函数将事件打包为跨平台的WebMouseEvent，然后将其发送给对应的RenderWidgetHost</li>
<li>RenderWidgetHost::ForwardInputEvent创建一个IPC消息<em>ViewMsg_HandleInputEvent</em>，将WebInputEvent序列化后放入其中，然后调用RenderWidgetHost::Send.</li>
<li>接着会调用RenderProcessHost::Send将消息发送给对应的IPC::ChannelProxy.</li>
<li>IPC::ChannelProxy.会将消息传给browser进程内的IPC线程 ，然后写入对应的pipe中</li>
</ul>


<p>许多消息在WebContents内创建，比如浏览消息。上面的流程同样适用于这类消息。</p>

<p><strong>对于render进程来说</strong></p>

<ul>
<li>IPC线程（这里写main thread?）上的IPC::Channel 读取到消息，然后通过代理传送给render线程</li>
<li>RenderView::OnMessageReceived获取到消息。很多消息在这里直接被处理了。但是这个消息不能在这里处理，被传递给RenderWidget::OnMessageReceived
然后被RenderWidget::OnHandleInputEvent处理</li>
<li>通过WebWidgetImpl::HandleInputEvent处理该消息，这个函数代替了WebKit内的PlatformMouseEvent,将事件传递给WebKit内的WebCore::Widget</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome">How Chromium Displays Web Pages</a></li>
<li><a href="http://www.chromium.org/developers/design-documents/inter-process-communication">Inter-process Communication (IPC)</a></li>
<li><a href="http://www.chromium.org/developers/design-documents/multi-process-resource-loading">Multi-process Resource Loading</a></li>
<li><a href="http://www.chromium.org/developers/content-module">Content module</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chrome多进程架构阅读]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/06/chromeduo-jin-cheng-jia-gou-yue-du/"/>
    <updated>2012-09-06T17:31:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/06/chromeduo-jin-cheng-jia-gou-yue-du</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>关于Chromium多进程架构综述</p>

<h2>多进程架构解决的问题</h2>

<p>很难构建一个不会崩溃和挂起而且绝对安全的渲染器。现代浏览器类似原始的单用户多任务系统
异常操作很容易使得系统崩溃。一个tab错误或者插件错误引起所有的tab崩溃。</p>

<p>对比现代操作系统，其强壮性是通过分离不同任务在不同的进程中来实现的。而且不同用户
只能访问本用户的数据。</p>

<p>所以我们可以用类似的方式来实现浏览器的架构。</p>

<h2>架构概览</h2>

<p>Chromium将不同的tabs通过不同的进程处理来保证其崩溃不会影响其他部分。并且严格限制
每个tab对于内存的访问。</p>

<p>运行UI，管理以及插件的进程称为<em>browser process</em> or <em>browser</em></p>

<p>每个tab运行的进程称为<em>render processes</em> or <em>renderers</em></p>

<p><em>renderers</em>利用<em>WebKit</em>解析渲染<em>HTML</em></p>

<p><img src="http://www.chromium.org/developers/design-documents/multi-process-architecture/arch.png?attredirects=0"></p>

<h3>管理进程</h3>

<p>每个渲染进程都有一个全局的<em>RenderProcess</em>对象。负责和<em>browser</em>交互。<em>browser</em>对应保存
一个<em>RenderProcessHost</em>管理状态和通信</p>

<h3>管理渲染</h3>

<p>每个渲染进程有一个或者多个被<em>RenderProcess</em>管理的<em>RenderView</em>实例，每个实例对应一个tab
在<em>browser</em>里的<em>RenderProcessHost</em>持有多个<em>RenderViewHost</em>。每个均有不同的ID。browser和特定
tab的通信靠<em>RenderViewHost</em>对象来实现，它通过<em>RenderProcessHost</em>将消息发送给<em>RenderProcess</em>内的<em>RenderView</em></p>

<h2>模块及接口</h2>

<p>渲染进程内</p>

<ul>
<li>渲染进程内是<em>RenderProcess</em>处理IPC消息，<em>browser</em>内是<em>RenderProcessHost</em></li>
<li><em>RenderView</em>和对应的<em>RenderViewHost</em>以及<em>WebKit</em>嵌入层进行通信。</li>
</ul>


<p>浏览进程内</p>

<ul>
<li><em>Browser</em>是一个顶层的浏览窗口</li>
<li><em>RenderProcessHost</em>是浏览进程和渲染进程IPC通信的实例</li>
<li><em>RenderViewHost</em>封装了和<em>RenderView</em>的通信。</li>
</ul>


<p>细节参见<a href="http://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome">How Chromium displays web pages </a></p>

<h2>共享渲染进程</h2>

<p>一般来说，每个tab都是在一个新进程中打开。但是某些时候需要多个tab共享一个渲染进程。
比如打开一个需要进行同步操作的web应用（JavaScript中的window.open）</p>

<h2>渲染进程崩溃检测</h2>

<p><em>browser</em>进程监控所有IPC链接，一旦发现某个链接断开，那么认为该渲染进程崩溃。目前处理崩溃的方式是显示一个通知崩溃
的页面</p>

<h2>渲染进程沙盒化</h2>

<p>因为<em>WebKit</em>单独运行在一个进程里，我们可以控制其如何访问以及访问哪些系统资源。比如渲染进程访问网络只能通过主进程进行访问。
另外可以控制其访问用户显示及相关对象。一旦用户打开一个新窗口或者捕捉按将，因为渲染进程都是独立的，那么不会产生错误的显示。</p>

<h2>内存管理</h2>

<p>主要在低内存的情况下，提高顶层tab的响应速度。主要通过降低没有顶层tab的<em>RenderProcess</em>的<em>Working set</em>的大小。提高切换速度。</p>

<h2>参考</h2>

<p><a href="http://www.chromium.org/developers/design-documents/multi-process-architecture">Multi-process Architecture</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome 下载编译]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/08/28/chrome-xia-zai-bian-yi/"/>
    <updated>2012-08-28T10:33:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/08/28/chrome-xia-zai-bian-yi</id>
    <content type="html"><![CDATA[<h2>安装依赖并获取代码</h2>

<ol>
<li>确认可以解压.tgz类型的文件</li>
<li>下载代码<a href="http://chromium-browser-source.commondatastorage.googleapis.com/chromium_tarball.html">source tarball</a></li>
<li>确认代码放置的分区空间足够</li>
<li>解压代码</li>
<li>安装<a href="http://www.chromium.org/developers/how-tos/install-depot-tools"><em>depot_tools</em></a></li>
<li><p>如果是ubuntu系统需要运行下面</p>

<p> <code>bash
 $cd /path/to/chromium/src
 $sudo ./build/install-build-deps.sh
</code></p></li>
<li><p>更新代码</p>

<p> <code>bash
 $ gclient sync --force
</code></p></li>
</ol>


<p>具体参见<a href="http://www.chromium.org/developers/how-tos/get-the-code">Get the code</a></p>

<h2>安装clang依赖</h2>

<p>因为chrome编译很慢，这里尝试利用clang加快编译速度以及提高编译质量</p>

<p><code>bash
$tools/clang/scripts/update.sh
</code></p>

<h2>编译</h2>

<h3>gcc</h3>

<p><code>bash
$./build/gyp_chromium
$make chrome -j4
</code></p>

<h3>clang</h3>

<p><code>bash
$GYP_GENERATORS=ninja GYP_DEFINES=clang=1 ./build/gyp_chromium
$ninja -C out/Debug chrome #fast
</code>
或者</p>

<p><code>bash
$GYP_GENERATORS=make GYP_DEFINES=clang=1 ./build/gyp_chromium
$make chrome -j4  # 4: Number of cores, change accordingly
</code></p>

<p><a href="http://code.google.com/p/chromium/wiki/Clang">chrome clang</a></p>

<h2>问题</h2>

<p><strong>nacl超时</strong></p>

<p>在进行更新代码操作时可能会遇到</p>

<p><code>bash
download_nacl_toolchain.py  timeout
</code></p>

<p>如果没有下载完就进行编译，可能会遇到
<code>
LASTCHANGE is needed
</code></p>

<p>这样的错误。</p>

<p>需要尝试重新更新代码</p>

<p>或者在build/common.gyi中将<em>'disable_nacl%'%: 0</em>置为1(这种方法是官网在编译
chrome os时超时的解决办法，未经尝试)</p>

<p><strong>webkit的svn超时</strong></p>

<p>一种方法：如果不需要webkit中的layouttest可以在.gclient中将其注销</p>

<p>```
solutions = [
{ "name"        : "src",</p>

<pre><code>"url"         : "https://src.chromium.org/chrome/trunk/src",
"deps_file"   : "DEPS",
"managed"     : True,
"custom_deps" : {
    "src/third_party/WebKit/LayoutTests": None,
    "src/content/test/data/layout_tests/LayoutTests": None,
    "src/chrome_frame/tools/test/reference_build/chrome": None,
    "src/chrome_frame/tools/test/reference_build/chrome_win": None,
    "src/chrome/tools/test/reference_build/chrome": None,
    "src/chrome/tools/test/reference_build/chrome_linux": None,
    "src/chrome/tools/test/reference_build/chrome_mac": None,
    "src/chrome/tools/test/reference_build/chrome_win": None,
},
"safesync_url": "",
</code></pre>

<p>},</p>

<pre><code>]
</code></pre>

<p>```</p>

<p>另一种方法：可以人工下载webkit然后将其替换到chrome工程中去。</p>

<h2>参考</h2>

<p><a href="http://www.chromium.org/Home">Chromium Project</a>
<a href="http://code.google.com/p/chromium/wiki/Clang">chrome clang</a>
<a href="http://www.chromium.org/developers/how-tos/get-the-code">Get the code</a></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chrome | My Octopress Blog]]></title>
  <link href="http://windfire-cd.github.com/blog/categories/chrome/atom.xml" rel="self"/>
  <link href="http://windfire-cd.github.com/"/>
  <updated>2012-09-07T14:18:58+08:00</updated>
  <id>http://windfire-cd.github.com/</id>
  <author>
    <name><![CDATA[windfire.cd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[chrome多进程架构阅读]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/06/chromeduo-jin-cheng-jia-gou-yue-du/"/>
    <updated>2012-09-06T17:31:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/06/chromeduo-jin-cheng-jia-gou-yue-du</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>关于Chromium多进程架构综述</p>

<h2>多进程架构解决的问题</h2>

<p>很难构建一个不会崩溃和挂起而且绝对安全的渲染器。现代浏览器类似原始的单用户多任务系统
异常操作很容易使得系统崩溃。一个tab错误或者插件错误引起所有的tab崩溃。</p>

<p>对比现代操作系统，其强壮性是通过分离不同任务在不同的进程中来实现的。而且不同用户
只能访问本用户的数据。</p>

<p>所以我们可以用类似的方式来实现浏览器的架构。</p>

<h2>架构概览</h2>

<p>Chromium将不同的tabs通过不同的进程处理来保证其崩溃不会影响其他部分。并且严格限制
每个tab对于内存的访问。</p>

<p>运行UI，管理以及插件的进程称为<em>browser process</em> or <em>browser</em></p>

<p>每个tab运行的进程称为<em>render processes</em> or <em>renderers</em></p>

<p><em>renderers</em>利用<em>WebKit</em>解析渲染<em>HTML</em></p>

<p><img src="http://www.chromium.org/developers/design-documents/multi-process-architecture/arch.png?attredirects=0"></p>

<h3>管理进程</h3>

<p>每个渲染进程都有一个全局的<em>RenderProcess</em>对象。负责和<em>browser</em>交互。<em>browser</em>对应保存
一个<em>RenderProcessHost</em>管理状态和通信</p>

<h3>管理渲染</h3>

<p>每个渲染进程有一个或者多个被<em>RenderProcess</em>管理的<em>RenderView</em>实例，每个实例对应一个tab
在<em>browser</em>里的<em>RenderProcessHost</em>持有多个<em>RenderViewHost</em>。每个均有不同的ID。browser和特定
tab的通信靠<em>RenderViewHost</em>对象来实现，它通过<em>RenderProcessHost</em>将消息发送给<em>RenderProcess</em>内的<em>RenderView</em></p>

<h2>模块及接口</h2>

<p>渲染进程内</p>

<ul>
<li>渲染进程内是<em>RenderProcess</em>处理IPC消息，<em>browser</em>内是<em>RenderProcessHost</em></li>
<li><em>RenderView</em>和对应的<em>RenderViewHost</em>以及<em>WebKit</em>嵌入层进行通信。</li>
</ul>


<p>浏览进程内</p>

<ul>
<li><em>Browser</em>是一个顶层的浏览窗口</li>
<li><em>RenderProcessHost</em>是浏览进程和渲染进程IPC通信的实例</li>
<li><em>RenderViewHost</em>封装了和<em>RenderView</em>的通信。</li>
</ul>


<p>细节参见<a href="http://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome">How Chromium displays web pages </a></p>

<h2>共享渲染进程</h2>

<p>一般来说，每个tab都是在一个新进程中打开。但是某些时候需要多个tab共享一个渲染进程。
比如打开一个需要进行同步操作的web应用（JavaScript中的window.open）</p>

<h2>渲染进程崩溃检测</h2>

<p><em>browser</em>进程监控所有IPC链接，一旦发现某个链接断开，那么认为该渲染进程崩溃。目前处理崩溃的方式是显示一个通知崩溃
的页面</p>

<h2>渲染进程沙盒化</h2>

<p>因为<em>WebKit</em>单独运行在一个进程里，我们可以控制其如何访问以及访问哪些系统资源。比如渲染进程访问网络只能通过主进程进行访问。
另外可以控制其访问用户显示及相关对象。一旦用户打开一个新窗口或者捕捉按将，因为渲染进程都是独立的，那么不会产生错误的显示。</p>

<h2>内存管理</h2>

<p>主要在低内存的情况下，提高顶层tab的响应速度。主要通过降低没有顶层tab的<em>RenderProcess</em>的<em>Working set</em>的大小。提高切换速度。</p>

<h2>参考</h2>

<p><a href="http://www.chromium.org/developers/design-documents/multi-process-architecture">Multi-process Architecture</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome 下载编译]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/08/28/chrome-xia-zai-bian-yi/"/>
    <updated>2012-08-28T10:33:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/08/28/chrome-xia-zai-bian-yi</id>
    <content type="html"><![CDATA[<h2>安装依赖并获取代码</h2>

<ol>
<li>确认可以解压.tgz类型的文件</li>
<li>下载代码<a href="http://chromium-browser-source.commondatastorage.googleapis.com/chromium_tarball.html">source tarball</a></li>
<li>确认代码放置的分区空间足够</li>
<li>解压代码</li>
<li>安装<a href="http://www.chromium.org/developers/how-tos/install-depot-tools"><em>depot_tools</em></a></li>
<li><p>如果是ubuntu系统需要运行下面</p>

<p> <code>bash
 $cd /path/to/chromium/src
 $sudo ./build/install-build-deps.sh
</code></p></li>
<li><p>更新代码</p>

<p> <code>bash
 $ gclient sync --force
</code></p></li>
</ol>


<p>具体参见<a href="http://www.chromium.org/developers/how-tos/get-the-code">Get the code</a></p>

<h2>安装clang依赖</h2>

<p>因为chrome编译很慢，这里尝试利用clang加快编译速度以及提高编译质量</p>

<p><code>bash
$tools/clang/scripts/update.sh
</code></p>

<h2>编译</h2>

<h3>gcc</h3>

<p><code>bash
$./build/gyp_chromium
$make chrome -j4
</code></p>

<h3>clang</h3>

<p><code>bash
$GYP_GENERATORS=ninja GYP_DEFINES=clang=1 ./build/gyp_chromium
$ninja -C out/Debug chrome #fast
</code>
或者</p>

<p><code>bash
$GYP_GENERATORS=make GYP_DEFINES=clang=1 ./build/gyp_chromium
$make chrome -j4  # 4: Number of cores, change accordingly
</code></p>

<p><a href="http://code.google.com/p/chromium/wiki/Clang">chrome clang</a></p>

<h2>问题</h2>

<p><strong>nacl超时</strong></p>

<p>在进行更新代码操作时可能会遇到</p>

<p><code>bash
download_nacl_toolchain.py  timeout
</code></p>

<p>如果没有下载完就进行编译，可能会遇到
<code>
LASTCHANGE is needed
</code></p>

<p>这样的错误。</p>

<p>需要尝试重新更新代码</p>

<p>或者在build/common.gyi中将<em>'disable_nacl%'%: 0</em>置为1(这种方法是官网在编译
chrome os时超时的解决办法，未经尝试)</p>

<p><strong>webkit的svn超时</strong></p>

<p>一种方法：如果不需要webkit中的layouttest可以在.gclient中将其注销</p>

<p>```
solutions = [
{ "name"        : "src",</p>

<pre><code>"url"         : "https://src.chromium.org/chrome/trunk/src",
"deps_file"   : "DEPS",
"managed"     : True,
"custom_deps" : {
    "src/third_party/WebKit/LayoutTests": None,
    "src/content/test/data/layout_tests/LayoutTests": None,
    "src/chrome_frame/tools/test/reference_build/chrome": None,
    "src/chrome_frame/tools/test/reference_build/chrome_win": None,
    "src/chrome/tools/test/reference_build/chrome": None,
    "src/chrome/tools/test/reference_build/chrome_linux": None,
    "src/chrome/tools/test/reference_build/chrome_mac": None,
    "src/chrome/tools/test/reference_build/chrome_win": None,
},
"safesync_url": "",
</code></pre>

<p>},</p>

<pre><code>]
</code></pre>

<p>```</p>

<p>另一种方法：可以人工下载webkit然后将其替换到chrome工程中去。</p>

<h2>参考</h2>

<p><a href="http://www.chromium.org/Home">Chromium Project</a>
<a href="http://code.google.com/p/chromium/wiki/Clang">chrome clang</a>
<a href="http://www.chromium.org/developers/how-tos/get-the-code">Get the code</a></p>
]]></content>
  </entry>
  
</feed>

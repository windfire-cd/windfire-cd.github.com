<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | My Octopress Blog]]></title>
  <link href="http://windfire-cd.github.com/blog/categories/c-/atom.xml" rel="self"/>
  <link href="http://windfire-cd.github.com/"/>
  <updated>2012-11-16T15:47:07+08:00</updated>
  <id>http://windfire-cd.github.com/</id>
  <author>
    <name><![CDATA[windfire.cd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[c++的Traits技术]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/06/c-plus-plus-de-traitsji-zhu/"/>
    <updated>2012-09-06T13:58:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/06/c-plus-plus-de-traitsji-zhu</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>traits是一种特性萃取技术,它在Generic Programming中被广泛运用,常常被用于使不同的类型可以用于相同的操作,或者针对不同类型提供不同的实现
类型和类型的特性本是耦合在一起，通过traits技巧就可以将两者解耦。从某种意思上说traits方法也是对类型的特性做了泛化的工作，通过traits提供的类型特性是泛化的类型特性</p>

<h2>例子</h2>

<h3>Example 1</h3>

<p>traits在实现过程中往往需要用到以下三种C++的基本特性</p>

<ul>
<li>enum</li>
<li>typedef</li>
<li>template (partial) specialization</li>
</ul>


<p><em>enum</em>用于将在不同类型间变化的标示统一成一个,它在C++中常常被用于在类中替代<em>define</em>,你可以称<em>enum</em>为类中的<em>define</em>;
<em>typedef</em>则用于定义你的模板类支持特性的形式,你的模板类必须以某种形式支持某一特性,否则类型萃取器<em>traits</em>将无法正常工作.看到这里你可能会想,太苛刻了吧?
其实不然,不支持某种特性本身也是一种支持的方式(见示例2,我们定义了两种标示, <em>__xtrue_type</em>和 <em>__xfalse_type</em>,分别表示对某特性支持和不支持).
<em>template (partial) specialization</em>被用于提供针对特定类型的正确的或更合适的版本.
借助以上几种简单技术,我们可以利用<em>traits</em>提取类中定义的特性,并根据不同的特性提供不同的实现.你可以将从特性的定义到萃取,再到<em>traits</em>的实际使用统称为<em>traits</em>技术,但这种定义使得<em>traits</em>显得过于复杂,
我更愿意将traits的定义限于特性萃取,因为这种定义使得traits显得更简单,更易于理解</p>

<p>```cpp</p>

<h1>include <iostream></h1>

<p>using namespace std;</p>

<p>class CComplexObject // a demo class
{</p>

<pre><code>public:
    void clone() { cout &lt;&lt; "in clone" &lt;&lt; endl; }
</code></pre>

<p>};</p>

<p>// Solving the problem of choosing method to call by inner traits class
template <typename T, bool isClonable>
class XContainer
{</p>

<pre><code>public:
    enum {Clonable = isClonable};

    void clone(T* pObj)
    {
        Traits&lt;isClonable&gt;().clone(pObj);
    }

    template &lt;bool flag&gt;
        class Traits
        {
        };

    template &lt;&gt;
        class Traits&lt;true&gt;
        {
            public:
                void clone(T* pObj)
                {
                    cout &lt;&lt; "before cloning Clonable type" &lt;&lt; endl;
                    pObj-&gt;clone();
                    cout &lt;&lt; "after cloning Clonable type" &lt;&lt; endl;
                }
        };

    template &lt;&gt;
        class Traits&lt;false&gt;
        {
            public:
                void clone(T* pObj)
                {
                    cout &lt;&lt; "cloning non Clonable type" &lt;&lt; endl;
                }
        };
</code></pre>

<p>};</p>

<p>void main()
{</p>

<pre><code>int* p1 = 0;
CComplexObject* p2 = 0;

XContainer&lt;int, false&gt; n1;
XContainer&lt;CComplexObject, true&gt; n2;

n1.clone(p1);
n2.clone(p2);
</code></pre>

<p>}
```</p>

<p>输出：</p>

<p>doing something non Clonable
before doing something Clonable
in clone
after doing something Clonable</p>

<p><a href="http://www.cppblog.com/woaidongmao/archive/2008/11/09/66387.html">Traits初探</a></p>

<h3>Example 2</h3>

<p><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/sanlongcai/333954/o_type_traits.JPG"></p>

<p>从图中可看出算法destroy不必关心具体的类型特性traits，client不用关心具体的destroy。destroy概念上存在的基类是通过参数多态实现的，traits概念上存在的基类是通过<em>type_traits</em>编程方法实现的。
另外得注意的是STL中的iterator相关<em>type_traits</em>的使用跟这里所说的有点不同，如果把类型特性从类中剥离出来看待，那就完全相同了。如何剥离，遇到<em>type_traits</em>相关的含有类型特性的类只看成是类型特性，跟类型特性无关的全都忽略掉</p>

<p>```cpp my_type_traits.h</p>

<h1>ifndef MY_TYPE_TRAITS_H</h1>

<h1>define MY_TYPE_TRAITS_H</h1>

<p>struct my_true_type {
};</p>

<p>struct my_false_type {
};</p>

<p>template <class T>
struct my_type_traits
{</p>

<pre><code>typedef my_false_type has_trivial_destructor;
</code></pre>

<p>};</p>

<p>template&lt;> struct my_type_traits<int>
{</p>

<pre><code>typedef my_true_type has_trivial_destructor;
</code></pre>

<p>};</p>

<h1>endif</h1>

<p>```</p>

<p>```cpp my_destruct.h</p>

<h1>ifndef MY_DESTRUCT_H</h1>

<h1>define MY_DESTRUCT_H</h1>

<h1>include <iostream></h1>

<h1>include "my_type_traits.h"</h1>

<p>using std::cout;
using std::endl;</p>

<pre><code>template &lt;class T1, class T2&gt;
</code></pre>

<p>inline void myconstruct(T1 *p, const T2&amp; value)
{</p>

<pre><code>new (p) T1(value);
</code></pre>

<p>}</p>

<pre><code>template &lt;class T&gt;
</code></pre>

<p>inline void mydestroy(T *p)
{</p>

<pre><code>typedef typename my_type_traits&lt;T&gt;::has_trivial_destructor trivial_destructor;
_mydestroy(p, trivial_destructor());
</code></pre>

<p>}</p>

<pre><code>template &lt;class T&gt;
</code></pre>

<p>inline void _mydestroy(T *p, my_true_type)
{</p>

<pre><code>cout &lt;&lt; " do the trivial destructor " &lt;&lt; endl;
</code></pre>

<p>}</p>

<pre><code>template &lt;class T&gt;
</code></pre>

<p>inline void _mydestroy(T *p, my_false_type)
{</p>

<pre><code>cout &lt;&lt; " do the real destructor " &lt;&lt; endl;
p-&gt;~T();
</code></pre>

<p>}</p>

<h1>endif</h1>

<p>```</p>

<p>```cpp  test_type_traits.cpp</p>

<h1>include <iostream></h1>

<h1>include "my_destruct.h"</h1>

<p>using std::cout;
using std::endl;</p>

<p>class TestClass
{</p>

<pre><code>public:
    TestClass()
    {
        cout &lt;&lt; "TestClass constructor call" &lt;&lt; endl;
        data = new int(3);
    }
    TestClass(const TestClass&amp; test_class)
    {
        cout &lt;&lt; "TestClass copy constructor call. copy data:"
            &lt;&lt; *(test_class.data) &lt;&lt; endl;
        data = new int;
        *data = *(test_class.data) * 2;
    }
    ~TestClass()
    {
        cout &lt;&lt; "TestClass destructor call. delete the data:" &lt;&lt; *data &lt;&lt; endl;
        delete data;
    }
private:
    int *data;
</code></pre>

<p>};</p>

<p>int main(void)
{</p>

<pre><code>{
    TestClass *test_class_buf;
    TestClass test_class;

    test_class_buf = (TestClass *)malloc(sizeof(TestClass));
    myconstruct(test_class_buf, test_class);
    mydestroy(test_class_buf);
    free(test_class_buf);
}

{
    int *int_p;
    int_p = new int;
    mydestroy(int_p);
    free(int_p);
}
</code></pre>

<p>}
```</p>

<p><a href="http://blog.csdn.net/sanlongcai/article/details/1786647">type traits 之"本质论"</a></p>

<h3>Example 3</h3>

<p>首先假如有以下一个泛型的迭代器类，其中类型参数 T 为迭代器所指向的类型</p>

<p>```cpp
template <typename T>
class myIterator
{</p>

<pre><code> ...
</code></pre>

<p>};
```</p>

<p>当我们使用myIterator时，怎样才能获知它所指向的元素的类型呢？我们可以为这个类加入一个内嵌类型，像这样</p>

<p>```cpp
template <typename T>
class myIterator
{</p>

<pre><code>      typedef  T value_type; 
      ...
</code></pre>

<p>};
```</p>

<p>这样当我们使用myIterator类型时，可以通过 myIterator::value_type来获得相应的myIterator所指向的类型。</p>

<p>现在我们来设计一个算法，使用这个信息。</p>

<p>```cpp
template <typename T>
typename myIterator<T>::value_type Foo(myIterator<T> i)
{</p>

<pre><code> ...
</code></pre>

<p>}
```</p>

<p>这里我们定义了一个函数Foo，它的返回为为  参数i 所指向的类型，也就是T，那么我们为什么还要兴师动众的使用那个value_type呢？ 那是因为，当我们希望修改Foo函数，使它能够适应所有类型的迭代器时，我们可以这样写：</p>

<p>```cpp
template <typename I> //这里的I可以是任意类型的迭代器
typename I::value_type Foo(I i)
{</p>

<pre><code> ...
</code></pre>

<p>}
```</p>

<p>现在，任意定义了 value_type内嵌类型的迭代器都可以做为Foo的参数了，并且Foo的返回值的类型将与相应迭代器所指的元素的类型一致。至此一切问题似乎都已解决，我们并没有使用任何特殊的技术。然而当考虑到以下情况时，新的问题便显现出来了：</p>

<p>原生指针也完全可以做为迭代器来使用，然而我们显然没有办法为原生指针添加一个value_type的内嵌类型，如此一来我们的Foo()函数就不能适用原生指针了，这不能不说是一大缺憾。那么有什么办法可以解决这个问题呢？ 此时便是我们的主角：类型信息榨取机 Traits 登场的时候了</p>

<p>```cpp
template <typename T>
class Traits
{</p>

<pre><code>      typedef typename T::value_type value_type;
</code></pre>

<p>};
```</p>

<p>```cpp
template <typename I> //这里的I可以是任意类型的迭代器
typename Traits<I>::value_type Foo(I i)
{</p>

<pre><code> ...
</code></pre>

<p>}
```</p>

<p>偏特化原生指针</p>

<p>```cpp
template <typename T>
class Traits&lt;T*> //注意 这里针对原生指针进行了偏特化
{</p>

<pre><code>      typedef typename T value_type;
</code></pre>

<p>};
```</p>

<p><code>cpp test.cpp
int * p;
....
int i = Foo(p);
</code></p>

<p><a href="http://www.cnblogs.com/Hush/archive/2004/03/10/2717.html">C++ Traits</a></p>

<h2>参考</h2>

<p><a href="http://www.pleee.com/archives/277.html">C++之traits小记</a></p>
]]></content>
  </entry>
  
</feed>

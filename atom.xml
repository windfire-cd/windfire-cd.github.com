<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://windfire-cd.github.com/atom.xml" rel="self"/>
  <link href="http://windfire-cd.github.com/"/>
  <updated>2012-12-10T18:40:20+08:00</updated>
  <id>http://windfire-cd.github.com/</id>
  <author>
    <name><![CDATA[windfire.cd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Install Hadoop on Ubuntu]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/12/10/install-hadoop-on-ubuntu/"/>
    <updated>2012-12-10T18:19:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/12/10/install-hadoop-on-ubuntu</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>Hadoop 由 Apache Software Foundation 公司于 2005 年秋天作为 Lucene 的子项目 Nutch 的一部分正式引入。它受到最先由 Google Lab 开发的 MapReduce 和 Google File System 的启发。2006 年 3 月份，MapReduce 和 Nutch Distributed File System (NDFS) 分别被纳入称为 Hadoop 的项目中。
Hadoop 是最受欢迎的在 Internet 上对搜索关键字进行内容分类的工具，但它也可以解决许多要求极大伸缩性的问题</p>

<h2>安装</h2>

<h3>软件</h3>

<p>软件版本分别为</p>

<ul>
<li><strong>java</strong>: <em>jdk-7u9-linux-x64</em></li>
<li><strong>hadooop</strong>: <em>hadoop-1.1.1.tar.gz</em></li>
<li><strong>eclipse</strong>: <em>eclipse-java-juno-SR1-linux-gtk-x86_64</em></li>
</ul>


<h3>步骤</h3>

<h4>JAVA</h4>

<p>解压<em>jdk-7u9-linux-x64.tar.gz</em>到<em>/usr/lib/jvm</em>中</p>

<p>运行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo update-java-alternatives java
</span></code></pre></td></tr></table></div></figure>


<p>选择对应的版本</p>

<p>类似配置javac, javaws</p>

<p>完成后判断java以及javac版本</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -version
</span><span class='line'>javac -version
</span></code></pre></td></tr></table></div></figure>


<p>在<em>/etc/profile</em>中添加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/usr/lib/jvm/jdk1.7.0_09/
</span><span class='line'><span class="nb">export </span><span class="nv">JRE_HOME</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/jre
</span><span class='line'><span class="nb">export </span><span class="nv">CLASSPATH</span><span class="o">=</span>.:<span class="nv">$JAVA_HOME</span>/lib:<span class="nv">$JRE_HOME</span>/lib:<span class="nv">$CLASSPATH</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$JAVA_HOME</span>/bin:<span class="nv">$JRE_HOME</span>/bin:<span class="nv">$PATH</span>
</span></code></pre></td></tr></table></div></figure>


<p>完成后需要重启</p>

<h4>Hadoop</h4>

<p><strong>创建用户组以及用户hadoop</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo addgroup hadoop
</span><span class='line'>sudo adduser --ingroup hadoop hadoop
</span></code></pre></td></tr></table></div></figure>


<p>将hadoop用户组添加进sudoer中，在<em>/etc/sudoers</em>中添加如下内容</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>%hadoop <span class="nv">ALL</span><span class="o">=(</span>ALL<span class="o">)</span> ALL
</span></code></pre></td></tr></table></div></figure>


<p>重启后以hadoop用户登录</p>

<p><strong>配置ssh</strong></p>

<p>安装opensssh-server</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install openssh-server
</span></code></pre></td></tr></table></div></figure>


<p>配置密码</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -t rsa -P <span class="s2">&quot;&quot;</span>
</span><span class='line'>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys
</span></code></pre></td></tr></table></div></figure>


<p>测试</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh localhost
</span></code></pre></td></tr></table></div></figure>


<p>可以不用密码登录</p>

<p><strong>禁用ipv6</strong>
可能出现问题：在ubuntu上使用IPV6会有一个问题，就是不同的网络环境配置hadoop会导致hadoop与IPV6地址绑定</p>

<p>在<em>/etc/sysctl.conf</em>中添加</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#disable ipv6</span>
</span><span class='line'>net.ipv6.conf.all.disable_ipv6 <span class="o">=</span> 1
</span><span class='line'>net.ipv6.conf.default.disable_ipv6 <span class="o">=</span> 1
</span><span class='line'>net.ipv6.conf.lo.disable_ipv6 <span class="o">=</span> 1
</span></code></pre></td></tr></table></div></figure>


<p>完成后重启</p>

<p>测试是否有效</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /proc/sys/net/ipv6/conf/all/disable_ipv6
</span></code></pre></td></tr></table></div></figure>


<p>0表示没有成功，1表示设置成功</p>

<h4>Eclipse</h4>

<h2>参考</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C10k 相关]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/11/15/c10k-xiang-guan/"/>
    <updated>2012-11-15T17:11:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/11/15/c10k-xiang-guan</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>网络服务在处理数以万计的客户端连接时，往往出现效率低下甚至完全瘫痪，这被称为
C10K问题。随着互联网的迅速发展，越来越多的网络服务开始面临C10K问题.这个问题在2001年被<a href="http://www.kegel.com/c10k.html">c10k</a>提出</p>

<p>经典的多线程模式和select模式都不再适用。
应当抛弃它们，采用<em>epoll/kqueue/dev_poll</em>来捕获I/O事件<a href="http://blog.csdn.net/roen/article/details/1537545">C10K问题</a>, <a href="http://www.cnblogs.com/fll/archive/2008/05/17/1201540.html">c10k翻译</a></p>

<h2>c10k问题</h2>

<p>C10K问题的最大特点是：设计不够良好的程序，其性能和连接数及机器性能的关系往往
是非线性的。举个例子：如果没有考虑过C10K问题，一个经典的基于select的程序能在
旧服务器上很好处理1000并发的吞吐量，它在2倍性能新服务器上往往处理不了并发
2000的吞吐量</p>

<h2>常用框架模式</h2>

<h3>Serve many clients with each thread, and use nonblocking I/O and level-triggered readiness notification</h3>

<p>把网络句柄设置为非阻塞模型，然后使用select()或poll()来告知哪个句柄已有数据在等待 处理。
此模型是最传统的，在此模型下，由内核告知你某个文件描述符是否准备好，是否已经完成你的任务</p>

<h3>Serve many clients with each thread, and use nonblocking I/O and readiness change notification</h3>

<p>Readiness change notification（或边缘触发就绪通知）的意思就是当你给内核一个文件描述 符，一段时间后，
如果该文件描述符从没有就绪到已经准备就绪，那么内核就会发出通知，告知 该文件描述符已经就绪，
并且不会再对该描述符发出类似的就绪通知直到你在描述符上进行一些 操作使得该描述符不再就绪
（如直到在send，recv或者accept等调用上遇到EWOULDBLOCK错误，或 者发送/接收了少于需要的字节数）。</p>

<p>当使用Readiness change notification时，必须准备好处理乱真事件，因为最常见的实现是只 要接收到任何数据包都发出就绪信号，
而不管文件描述符是否准备就绪</p>

<h3>Serve many clients with each server thread, and use asynchronous I/O</h3>

<p>IO使用的是边缘触发的完成时通知，例如，当一个操作完成时信号就被加入队列</p>

<h3>Serve one client with each server thread</h3>

<p>让read()和write()阻塞. 这样不好的地方在于需要为每个客户端使用一个完整的栈，从而比较浪费内存。
许多操作系统仍在处理数百个线程时存在一定的问题</p>

<h3>Build the server code into the kernel</h3>

<p>Novell和Microsoft都宣称已经在不同时期完成了该工作，至少NFS的实现完成了该工作。 khttpd在Linux下为静态web页面完成了该工作，
Ingo Molnar完成了&#8221;TUX&#8221; (Threaded linUX webserver) ，这是一个Linux下的快速的可扩展的内核空间的HTTP服务器</p>

<p>在Linux内核的邮件列表上讨论了该方法的好处和缺点，多数人认为不应该把web服务器放进内核中， 相
反内核加入最小的钩子hooks来提高web服务器的性能，这样对其它形式的服务器就有益</p>

<h2>影响服务器性能方面</h2>

<p><a href="http://blog.csdn.net/marising/article/details/5186643">高性能服务器架构(High-Performance Server Architecture)</a>里面论述了影响服务器架构性能的若干方面</p>

<h3>数据拷贝（Data Copies）</h3>

<p>有一种可以避免数据拷贝的方法是使用buffer的描述符（或者buffer chains的描述符）来取代直接使用buffer指针，
每个buffer描述符应该由以下元素组成：
-  一个指向buffer的指针和整个buffer的长度
-  一个指向buffer中真实数据的指针和真实数据的长度，或者长度的偏移
-  以双向链表的形式提供指向其它buffer的指针
-  一个引用计数</p>

<p>我不建议在任何情况下都使用这种技术，因为当你想在链上搜索你想要的一个块时，就不得不遍历一遍描述符链，这甚至比数据拷贝更糟糕。
最适用这种技术地方是在程序中大的数据块上，这些大数据块应该按照上面所说的那样独立的分配描述符，以避免发生拷贝，
也能避免影响服务器其它部分的工作</p>

<p>关于数据拷贝最后要指出的是：在避免数据拷贝时不要走极端</p>

<h3>上下文切换（Context Switches）</h3>

<p>在我的经验里，比起数据拷贝，上下文切换是让高负载应用彻底完蛋的真正杀手。系统更多的时间都花费在线程切换上，
而不是花在真正做有用工作的线程上</p>

<p>引起环境切换的第一个原因往往是活跃线程数比CPU个数多。随着活跃线程数相对于CPU个数的增加，上下文切换的次数也在增加，
如果你够幸运，这种增长是线性的，但更常见是指数增长</p>

<p>一个有适量线程的程序首先要考虑的事情是规划出如何创建一个线程去管理多连接<a href="http://blog.csdn.net/roen/article/details/1537545">c10k</a></p>

<p>引起环境切换的第二个原因是把对请求的处理从一个线程转移到另一个线程</p>

<p>限制激活线程的数量:</p>

<blockquote><p>根据cpu个数限制线程个数?</p></blockquote>

<p>最简单同时也是最有效的方法之一是：用一个老式的带计数的信号量，每一个线程执行的时候就先持有信号量。如果信号量已经到了最大值，那
些处于监听模式的线程被唤醒的时候可能会有一次额外的环境切换,(监听线程被唤醒是因为有连接请求到来, 此时监听线程持有信号量时发现
信号量已满,所以即刻休眠), 接着它就会被阻塞在这个信号量上，一旦所有监听模式的线程都这样阻塞住了，那么它们就不会再竞争资源了，
直到其中一个线程释放信号量，这样环境切换对系统的影响就可以忽略不计</p>

<p>一旦处理请求的过程被分成两个阶段(监听和工作)，那么更进一步，这些处理过程在将来被分成更多的阶段(更多的线程)</p>

<p>应该注意到在这种模式下，对阶段的排队是在一个线程内完成的，而不是经由两个线程中完成。这样避免不断把请求放在下一阶段的队列里，紧接着又从该队列取出这个请求来执行。这种经由很多活动队列和锁的阶段很没必要</p>

<h3>内存分配（Memory Allocator）</h3>

<ul>
<li>使用预分配</li>
<li>使用一个内存释放分配的lookaside list(监视列表或者后备列表)</li>
<li>第三条建议与我们还没有讨论的锁有关系</li>
</ul>


<h3>锁竞争（Lock Contention）</h3>

<p>高效率的锁是非常难规划的, 以至于我把它称作卡律布狄斯和斯库拉(参见附录)。一方面, 锁的简单化(粗粒度锁)会导致并行处理的串行化,
因而降低了并发的效率和系统可伸缩性; 另一方面, 锁的复杂化(细粒度锁)在空间占用上和操作时的时间消耗上都可能产生对性能的侵蚀。
偏向于粗粒度锁会有死锁发生，而偏向于细粒度锁则会产生竞争</p>

<p>首要的事情是为你程序中的锁形成一张图表，有两个轴</p>

<ul>
<li>纵轴表示代码。如果你正在应用剔出了分支的阶段架构</li>
<li>水平轴表示数据集。在请求的每个阶段都应该有属于该阶段需要的数据集</li>
</ul>


<p>最重要的规则：两个请求不应该产生竞争，除非它们在同一个阶段需要同样的数据集</p>

<p>你定义出了上面那个网格图，在你的系统中的每种类型的锁就都可以被标识出来了。
你的下一个目标是确保这些标识出来的锁尽可能在两个轴之间均匀的分布, 这部分工作是和具体应用相关的</p>

<ul>
<li>如果你能对请求按顺序编号，或者能对请求进行哈希，或者能把请求和事物ID关联起来，那么根据这些编号或者ID就能对数据更好的进行分隔。</li>
<li>有时，基于数据集的资源最大化利用，把请求动态的分配给数据，相对于依据请求的固有属性来分配会更有优势。就好像现代CPU的多个整数运算单元知道把请求分离一样</li>
<li>确定每个阶段指定的数据集是不一样的是非常有用的，以便保证一个阶段争夺的数据在另外阶段不会争夺</li>
</ul>


<h3>其他方面</h3>

<ul>
<li>你的存储子系统在大数据读写和小数据读写，随即读写和顺序读写方面是如何进行？在预读和延迟写入方面做得怎样？</li>
<li>你使用的网络协议效率如何？是否可以通过修改参数改善性能？是否有类似于<em>TCP_CORK, MSG_PUSH,Nagle-toggling</em>算法的手段来避免小消息产生？</li>
<li>你的系统是否支持Scatter-Gather I/O(例如readv/writev)? 使用这些能够改善性能，也能避免使用缓冲链(见第一节数据拷贝的相关叙述)带来的麻烦</li>
<li>你的系统的页大小是多少？高速缓存大小是多少？向这些大小边界进行对起是否有用？系统调用和上下文切换花的代价是多少？</li>
<li>你是否知道锁原语的饥饿现象？你的事件机制有没有&#8221;惊群&#8221;问题?你的唤醒/睡眠机制是否有这样糟糕的行为: 当X唤醒了Y, 环境立刻切换到了Y,但是X还有没完成的工作?</li>
</ul>


<h2>c500k c1000k</h2>

<p><a href="http://www.dbanotes.net/arch/c10k_c500k.html">从 C10K 到 C500K</a>讨论了<a href="http://urbanairship.com/"> Urban Airship </a>c500k的实现，基于Java + Pure NIO.参考文档<a href="http://www.metabrew.com/article/a-million-user-comet-application-with-mochiweb-part-1">A Million-user Comet Application with Mochiweb, Part 1</a>
另外涉及内核调优的方法<a href="http://blog.urbanairship.com/blog/2010/09/29/linux-kernel-tuning-for-c500k/">Linux Kernel Tuning for C500k </a></p>

<p>在<a href="http://qz.qq.com/6119968/blog?uin=6119968&amp;vin=0&amp;blogid=1307549122">网络编程之C10K、C500K、C1000K问题</a>中说明</p>

<p>Select和Poll在连接数增加时，性能急剧下降的原因</p>

<ul>
<li>首先操作系统面对每次的select/poll操作，都需要重新建立一个当前线程的关心事件列表，并把线程挂在这个复杂的等待队列上，这是相当耗时的</li>
<li>其次，应用软件在select/poll返回后也需要对传入的句柄列表做一次扫描来dispatch，这也是很耗时的。这两件事都是和并发数相关，而I/O事件的密度也和并发数相关，导致CPU占用率和并发数近似成O(n2)</li>
</ul>


<p>Linux 2.6.35 Kernel Google捐赠了的两项新特性可以在系统的多个CPU之间分配网络处理负载，改进网络处理的性能</p>

<p><a href="http://wenku.baidu.com/view/54715a0590c69ec3d5bb75c8.html">C1000K高性能服务器构建技术</a>讨论了淘宝构建高性能服务器的经验</p>

<h2>参考</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx 参考]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/11/14/nginx-can-kao/"/>
    <updated>2012-11-14T17:50:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/11/14/nginx-can-kao</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>Nginx是当前最流行的HTTP Server之一，根据W3Techs的统计，目前世界排名
（根据Alexa）前100万的网站中，Nginx的占有率为6.8%。与Apache相比，
Nginx在高并发情况下具有巨大的性能优势。
Nginx属于典型的微内核设计，其内核非常简洁和优雅，同时具有非常高的可扩展性。
Nginx最初仅仅主要被用于做反向代理，后来随着HTTP核心的成熟和各种HTTP扩展模块的丰富，
Nginx越来越多被用来取代Apache而单独承担HTTP Server的责任，例如目前淘宝内各个部门正越来越多使用Nginx取代Apache，
据笔者了解，在腾讯和新浪等公司也存在类似情况</p>

<h2>源码</h2>

<ol>
<li><a href="www.nginx.org">Nginx</a></li>
<li><a href="http://www.alidata.org/archives/1390">Nginx 内存池</a></li>
<li><a href="http://blog.csdn.net/kenbinzhang/article/category/603177">分析blog 1</a></li>
<li><a href="http://my.oschina.net/fqing/blog?catalog=232290">osc blog 1</a></li>
<li><a href="http://blog.csdn.net/dingyujie">csdn blog 1</a></li>
<li><a href="http://tengine.taobao.org/book/index.html#">Nginx开发从入门到精通</a></li>
</ol>


<h2>模块化</h2>

<ol>
<li><a href="http://www.codinglabs.org/html/intro-of-nginx-module-development.html">Nginx模块开发入门</a></li>
<li><a href="http://www.evanmiller.org/nginx-modules-guide.html">Emiller&#8217;s Guide To Nginx Module Development</a></li>
<li><a href="http://www.evanmiller.org/nginx-modules-guide-advanced.html">Emiller&#8217;s Advanced Topics In Nginx Module Development</a></li>
<li><a href="http://blog.chinaunix.net/uid-17271162-id-3061033.html">subrequest blog </a></li>
<li><a href="http://www.162cm.com/p/ngx_ext.html">开发nginx模块之Hello World篇</a></li>
<li><a href="http://tengine.taobao.org/book/index.html">Nginx开发从入门到精通</a></li>
<li><a href="http://huoding.com/2012/08/31/156">lua with nginx</a></li>
<li><a href="http://blog.latermoon.com/?p=729">Nginx+Lua+Redis整合实现高性能API接口</a></li>
</ol>


<h2>其他</h2>

<ol>
<li><a href="http://www.pagefault.info">pagefault blog</a></li>
<li><a href="http://simohayha.iteye.com/">csdn blog 2</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux异步和非阻塞]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/11/13/linuxyi-bu-he-fei-zu-sai/"/>
    <updated>2012-11-13T18:45:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/11/13/linuxyi-bu-he-fei-zu-sai</id>
    <content type="html"><![CDATA[<h2>概念</h2>

<p>对于linux来说，异步和非阻塞是两个概念。可以概述如下</p>

<ul>
<li>异步: 使得拥有文件指针的进程或者进程组能够立刻收到内核的SIGIO信号</li>
<li>非阻塞: 使得对于文件指针的读写操作不会阻塞于buffer为空的情况</li>
</ul>


<h2>区别及使用说明</h2>

<p>ioctl和FIOASYNC等价于fcntl和<em>O_ASYNC</em>。</p>

<p>ioctl和FIONBIO等价于fcntl和<em>O_NONBLOCK</em>。</p>

<p>下面两个是等价的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">fcntl</span><span class="p">(</span><span class="n">socket</span><span class="p">,</span> <span class="n">F_SETFL</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">F_GETFL</span><span class="p">)</span> <span class="o">|</span> <span class="n">O_NONBLOCK</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">nb</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="n">ioctl</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">FIONBIO</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">nb</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>FIOASYNC设置<em>O_ASYNC</em>标记，该标记决定fd可以IO时进程是否会收到SIGIO和SIGPOLL信号。</p>

<p>FIONBIO设置<em>O_NONBLOCK</em>标记，该标记会改变read，write和同类函数的行为，使得在fd还不能IO时立即返回而不是hang住。</p>

<p>后者经常跟select，poll等函数一起使用，使得主程序不会因为个别socket而影响其他。</p>

<p>一般来说使用select和poll结合非阻塞的文件指针可以对应大部分情况，但是某些时候
需要使用异步的文件指针。比如：如果一个函数处理数据，但是处理时间很长，在其处理的时候
我们需要运行这个函数的进程及时响应网络事件或者内核信号，这时就需要将其置为异步</p>

<p>对于socket来说，如果需要设置异步的话需要三个步骤</p>

<ol>
<li>必须注册一个响应SIGIO的信号回调函数</li>
<li>通过fcntl设置<em>F_SETOWN</em>,使得socket属于某个进程</li>
<li>通过fcntl设置<em>O——ASYNC</em>将该socket设置为异步</li>
</ol>


<h2>非阻塞例子</h2>

<h3>设置非阻塞</h3>

<figure class='code'><figcaption><span>async</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">signal</span><span class="p">(</span><span class="n">SIGIO</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">input_handler</span><span class="p">);</span> <span class="cm">/* dummy sample; sigaction(  ) is better */</span>
</span><span class='line'><span class="n">fcntl</span><span class="p">(</span><span class="n">STDIN_FILENO</span><span class="p">,</span> <span class="n">F_SETOWN</span><span class="p">,</span> <span class="n">getpid</span><span class="p">(</span>  <span class="p">));</span>
</span><span class='line'><span class="n">oflags</span> <span class="o">=</span> <span class="n">fcntl</span><span class="p">(</span><span class="n">STDIN_FILENO</span><span class="p">,</span> <span class="n">F_GETFL</span><span class="p">);</span>
</span><span class='line'><span class="n">fcntl</span><span class="p">(</span><span class="n">STDIN_FILENO</span><span class="p">,</span> <span class="n">F_SETFL</span><span class="p">,</span> <span class="n">oflags</span> <span class="o">|</span> <span class="n">FASYNC</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>网络非阻塞例子</h3>

<figure class='code'><figcaption><span>recv</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;       </span><span class="cm">/*socket address struct*/</span><span class="cp">  </span>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;            </span><span class="cm">/*host to network convertion*/</span><span class="cp">  </span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;sys/ioctl.h&gt;  </span>
</span><span class='line'><span class="cp">#define MAX_TRANSPORT_LENTH 512  </span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">g_var</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">g_skt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">sig_handler</span><span class="p">(</span><span class="kt">int</span> <span class="n">signum</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span>  <span class="n">buf</span><span class="p">[</span><span class="n">MAX_TRANSPORT_LENTH</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">len</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">g_skt</span><span class="p">,</span><span class="n">buf</span><span class="p">,</span><span class="n">MAX_TRANSPORT_LENTH</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">len</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Read socket failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;In SIGIO handler,got msg:%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">buf</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">addr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">addr</span><span class="p">));</span>
</span><span class='line'>  <span class="n">addr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span>  <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">INADDR_ANY</span><span class="p">;</span>
</span><span class='line'>  <span class="n">addr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">50001</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">signal</span><span class="p">(</span><span class="n">SIGIO</span><span class="p">,</span><span class="n">sig_handler</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">g_skt</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">SOCK_DGRAM</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">g_skt</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Create socket failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">on</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="n">fcntl</span><span class="p">(</span><span class="n">g_skt</span><span class="p">,</span> <span class="n">F_SETOWN</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span><span class="c1">//Set process or process group ID to receive SIGIO signals  </span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="n">ret</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Fcntl F_SETOWN failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="n">ioctl</span><span class="p">(</span><span class="n">g_skt</span><span class="p">,</span> <span class="n">FIOASYNC</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">on</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="n">ret</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Fcntl FIOASYNC failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="n">ioctl</span><span class="p">(</span><span class="n">g_skt</span><span class="p">,</span> <span class="n">FIONBIO</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">on</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="n">ret</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;ioctl FIONBIO failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="n">bind</span><span class="p">(</span><span class="n">g_skt</span><span class="p">,(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">addr</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="n">ret</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Bind socket failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;I am running</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">g_skt</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>send</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;       </span><span class="cm">/*socket address struct*/</span><span class="cp">  </span>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;            </span><span class="cm">/*host to network convertion*/</span><span class="cp">  </span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;signal.h&gt;  </span>
</span><span class='line'><span class="cp">#define MAX_TRANSPORT_LENTH 512  </span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">addr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">addr</span><span class="p">));</span>
</span><span class='line'>  <span class="n">addr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span>  <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="s">&quot;192.168.1.106&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">addr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">50001</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sock</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">SOCK_DGRAM</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">sock</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Create socket failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ret</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="n">sock</span><span class="p">,(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">addr</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">addr</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;Connect socket failed&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Will send messge to server</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">write</span><span class="p">(</span><span class="n">sock</span><span class="p">,</span><span class="s">&quot;Some unknown infomation</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">MAX_TRANSPORT_LENTH</span><span class="p">);</span>
</span><span class='line'>      <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>注意</h2>

<p>对于tcp的SIGIO来说，很多网络事件发送信号给相应的进程，所以在回调函数内需要进行区分</p>

<h2>参考</h2>

<ol>
<li><a href="http://books.google.com.tw/books?id=ptSC4LpwGA0C&amp;pg=PA664&amp;lpg=PA664&amp;dq=SIGIO+tcp&amp;source=bl&amp;ots=Kr5zTgdmMo&amp;sig=8897At9uxcwSAviR46ExndhqI8U&amp;hl=zh-TW&amp;sa=X&amp;ei=VCSiUN-KGe6gmQWXnoCgDw&amp;ved=0CB8Q6AEwAA#v=onepage&amp;q=SIGIO%20tcp&amp;f=false">unp</a></li>
<li><a href="http://51hired.com/questions/13335/FIOASYNC%E5%92%8CFIONBIO%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F">FIOASYNC和FIONBIO的区别是什么？</a></li>
<li><a href="http://stackoverflow.com/questions/7440571/whats-the-difference-between-fionbio-and-fioasync-for-socket">What&#8217;s the difference between FIONBIO and FIOASYNC for socket?</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nutch 安装]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/11/08/nutch-an-zhuang/"/>
    <updated>2012-11-08T16:14:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/11/08/nutch-an-zhuang</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>Nutch 是一个开源Java 实现的搜索引擎。它提供了我们运行自己的搜索引擎所需的全部工具。包括全文搜索和Web爬虫。</p>

<p>尽管Web搜索是漫游Internet的基本要求, 但是现有web搜索引擎的数目却在下降. 并且这很有可能进一步演变成为一个公司垄断了几乎所有的web搜索为其谋取商业利益.这显然 不利于广大Internet用户.</p>

<p>Nutch为我们提供了这样一个不同的选择. 相对于那些商用的搜索引擎, Nutch作为开放源代码 搜索引擎将会更加透明, 从而更值得大家信赖. 现在所有主要的搜索引擎都采用私有的排序算法, 而不会解释为什么一个网页会排在一个特定的位置. 除此之外, 有的搜索引擎依照网站所付的 费用, 而不是根据它们本身的价值进行排序. 与它们不同, Nucth没有什么需要隐瞒, 也没有 动机去扭曲搜索的结果. Nutch将尽自己最大的努力为用户提供最好的搜索结果</p>

<h2>依赖</h2>

<p>[Apache Nutch 2.1][1]2.0版本后将持久化层转化到[Apache Gora][2]上，提供HBase，
Cassandra, Hypertable; Redis ; MySQL, HSQLDB等等。</p>

<h2>安装</h2>

<p><strong>下载后解压</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar -xvf apache-nutch-2.1.tar.gz
</span></code></pre></td></tr></table></div></figure>


<p><strong>需要配置属性</strong></p>

<p>在nutch-site.xml中配置属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;property&gt;</span>
</span><span class='line'> <span class="nt">&lt;name&gt;</span>storage.data.store.class<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>  <span class="nt">&lt;value&gt;</span>org.apache.gora.hbase.store.HBaseStore<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>   <span class="nt">&lt;description&gt;</span>Default class for storing data<span class="nt">&lt;/description&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/property&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>去除ivy/ivy.xml中的hbase依赖</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="c">&lt;!-- Uncomment this to use HBase as Gora backend. --&gt;</span>
</span><span class='line'>
</span><span class='line'>       <span class="nt">&lt;dependency</span> <span class="na">org=</span><span class="s">&quot;org.apache.gora&quot;</span> <span class="na">name=</span><span class="s">&quot;gora-hbase&quot;</span> <span class="na">rev=</span><span class="s">&quot;0.2&quot;</span> <span class="na">conf=</span><span class="s">&quot;*-&gt;default&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在gora.properties添加默认属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>gora.datastore.default=org.apache.gora.hbase.store.HBaseStore
</span></code></pre></td></tr></table></div></figure>


<p><strong>进入后使用ant进行编译</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ant
</span></code></pre></td></tr></table></div></figure>


<h2>测试</h2>

<p>对于2.0版本后，启动前需要保证HBase已经顺利启动，具体步骤见[HBasequick start tutorial][3]</p>

<p>利用下面的命令进行测试</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>runtime/local/bin
</span><span class='line'>nutch inject ../urls
</span><span class='line'>nutch readdb
</span></code></pre></td></tr></table></div></figure>


<h2>问题</h2>

<p><strong>ava.lang.IllegalArgumentException: Not a host:port pair</strong></p>

<h2>参考</h2>

<ul>
<li><p><a href="http://nutch.apache.org/">1</a></p></li>
<li><p><a href="http://gora.apache.org/">2</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Traffic Server Plugins概述]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/10/26/apache-trafficserver-pluginsgai-shu/"/>
    <updated>2012-10-26T14:55:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/10/26/apache-trafficserver-pluginsgai-shu</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>可以利用c语言为ats编写功能插件。ats支持复杂的基于web的处理和缓存模式，其包含一个事件触发的循环</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span><span class="p">(;;){</span>
</span><span class='line'>  <span class="n">event</span> <span class="o">=</span> <span class="n">get_next_event</span><span class="p">();</span>
</span><span class='line'>  <span class="n">handle_event</span><span class="p">(</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以编写自己的插件，然后编译成动态库，供ats启动时进行载入。插件注册相应的事件处理函数以及事件类型
一旦ats需要处理某个事件，它会运行所有注册在该事件上的回调函数。</p>

<p><img src="http://trafficserver.apache.org/images/sdk/plugin_process.jpg"></p>

<h2>用途</h2>

<p>插件有以下用途</p>

<ul>
<li>HTTP协议处理：过滤，屏蔽，认证用户，传递内容</li>
<li>新协议支持：可以支持新的缓存协议</li>
</ul>


<p>下面是一些插件的例子：</p>

<ul>
<li>Blacklisting plugin： 拒绝某些网络访问</li>
<li>Append transform plugin：将文本通过http响应的content传递回去</li>
<li>Image conversion plugin：将jpg转化为gif</li>
<li>Compression plugin：将响应内容进行压缩</li>
<li>Authorization plugin：认证访问用户</li>
<li>A plugin that gathers client information：收集请求信息并保存到数据库中</li>
<li>Protocol plugin：利用ats监听特定端口，处理特殊的协议请求</li>
</ul>


<p><img src="http://trafficserver.apache.org/images/sdk/Uses.jpg"></p>

<h2>例子</h2>

<p>有如下几个例子</p>

<ul>
<li>append-transform.c： 为http响应添加文本信息</li>
<li>server-transform.c：将请求数据提供给转码服务器进行转码后传回给client端，例如图形转化</li>
<li>basic-auth.c：http代理认证</li>
<li>blacklist-1.c：读取配置文件进行代理认证</li>
</ul>


<h2>插件载入</h2>

<p>ats启动后根据plugin.config配置文件决定哪些插件需要进行载入。同时plugin.config被传递给每个插件的初始化函数TSPluginInit。
 records.config确定插件动态库的路径</p>

<h2>配置</h2>

<p>下面是一个配置文件例子，包含一个命令行，一个空白行和两个插件配置行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># This is a comment line.</span>
</span><span class='line'>
</span><span class='line'>my-plugin.so junk.example.com trash.example.org garbage.example.edu
</span><span class='line'>some-plugin.so arg1 arg2 <span class="nv">$proxy</span>.config.http.cache.on
</span></code></pre></td></tr></table></div></figure>


<p>so文件后面是对应的参数序列
插件的配置文件每一行不能大于1023字节，插件的so命名应该是全局唯一的。</p>

<ul>
<li>命令行以#起始</li>
<li>空行被葫芦额</li>
<li>插件载入顺序和在plugin.config出现的顺序一致</li>
</ul>


<h2>启动及初始化</h2>

<p>每个插件需要定义一个初始化函数TSPluginInit，这个函数读取配置文件并注册对应的事件。</p>

<p>TSPluginInit包含两个参数</p>

<ul>
<li>argc: 该插件在plugin.config内的参数个数</li>
<li>argv: 该插件在plugin.config参数数组</li>
</ul>


<h2>参考</h2>

<p><a href="http://trafficserver.apache.org/docs/trunk/sdk/getting-started/">Understanding Traffic Server Plugins</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Trafficserver介绍]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/10/25/apache-trafficserverjie-shao/"/>
    <updated>2012-10-25T10:54:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/10/25/apache-trafficserverjie-shao</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p><a href="http://trafficserver.apache.org/" title="Apache Traffic Server">Apache Traffic Server</a>可以加速internet访问，加强网站性能并提供良好的
网站托管能力</p>

<p>对于网络上日益增长的数据交流，<a href="http://trafficserver.apache.org/" title="Apache Traffic Server">Apache Traffic Server</a>作为一个高性能的web
代理缓存服务器，可以通过缓存多次访问以及临近数据应对上述问题。它充分利用网络
带宽，提高内容分发系统性能</p>

<h2>角色</h2>

<p>ASP可以作为下述角色使用</p>

<ul>
<li>web代理缓存</li>
<li>反向代理</li>
<li>多级缓存</li>
</ul>


<h2>模块</h2>

<p>Traffic Server可以由下面几个模块组合工作</p>

<h3>The Traffic Server Cache</h3>

<p>由一个叫做&#8221;对象仓库&#8221;的高速对象数据库组成。对象索引是由url或者头信息生成的
可以根据语言以及编码管理对象，对于小文件以及大文件同样高效。一旦配置好的空间
不够用则自动删除较老的数据。其被设计对于磁盘的故障是可以容忍的</p>

<h3>The RAM Cache</h3>

<p>被访问最多的对象存储在RAM上，降低磁盘负载。</p>

<h3>The Host Database</h3>

<p>保存所有数据源访问dns信息</p>

<h3>The DNS Resolver</h3>

<p>一个快速，异步的DNS解析器</p>

<h2>Traffic Server Processes</h2>

<p>Traffic Server包含三个工作进程处理用户请求以及进行管理/控制/监控整个系统</p>

<p><strong>traffic_server</strong></p>

<p>负责接收网络链接，解析协议，从原始服务器或者缓存中获取数据</p>

<p><strong>traffic_manager</strong></p>

<p>负责查看，监控以及重新设置<em>traffic_server</em>的属性。还负责自动端口分配，统计
信息，集群管理以及虚拟ip管理</p>

<p><strong>traffic_cop</strong></p>

<p>负责监控<em>traffic_server</em>以及<em>traffic_manager</em>的健康信息，通过定时心跳来收集
两者信息并同步到网页上，一旦两者出现异常，它还负责重启两者</p>

<p><img src="http://trafficserver.apache.org/images/admin/process.jpg"></p>

<h2>参考</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[STL erase]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/10/23/stl-erase/"/>
    <updated>2012-10-23T17:22:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/10/23/stl-erase</id>
    <content type="html"><![CDATA[<h2>遍历删除说明</h2>

<p>STL中的容器按存储方式分为两类:
- 一类是按以数组形式存储的容器（如：vector 、deque)</p>

<ul>
<li>另一类是以不连续的节点形式存储的容器（如：list、set、map）</li>
</ul>


<p>在使用erase方法来删除元素时，需要注意一些问题</p>

<p>如下的方法对于所有容器都是有问题的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">Container</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">it</span> <span class="o">=</span> <span class="n">container</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">container</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">N</span> <span class="o">==</span> <span class="n">X</span><span class="p">)</span>
</span><span class='line'>      <span class="n">container</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">it</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中it已经变为野指针，对它的++操作会造成异常</p>

<h2>list,set,map</h2>

<figure class='code'><figcaption><span>方法一</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">itList</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="n">itList</span> <span class="o">=</span> <span class="n">List</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">itList</span> <span class="o">!=</span> <span class="n">List</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">WillDelete</span><span class="p">(</span> <span class="o">*</span><span class="n">itList</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">itList</span> <span class="o">=</span> <span class="n">List</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span> <span class="n">itList</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">itList</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>方法二</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">itList</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="n">itList</span> <span class="o">=</span> <span class="n">List</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">itList</span> <span class="o">!=</span> <span class="n">List</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">WillDelete</span><span class="p">(</span> <span class="o">*</span><span class="n">itList</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">List</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span> <span class="n">itList</span><span class="o">++</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">itList</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是两个错误的方法</p>

<figure class='code'><figcaption><span>错误一</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">List</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">itList</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="n">itList</span> <span class="o">=</span> <span class="n">List</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">itList</span> <span class="o">!=</span> <span class="n">List</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">itList</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">WillDelete</span><span class="p">(</span> <span class="o">*</span><span class="n">itList</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">List</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span> <span class="n">itList</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>错误二</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">List</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">itList</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="n">itList</span> <span class="o">=</span> <span class="n">List</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">itList</span> <span class="o">!=</span> <span class="n">List</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">WillDelete</span><span class="p">(</span> <span class="o">*</span><span class="n">itList</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">itList</span> <span class="o">=</span> <span class="n">List</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span> <span class="o">++</span><span class="n">itList</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">itList</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>错误一出现了野指针，而错误二在删除前就进行了偏移</p>

<h2>vector,dequeue</h2>

<figure class='code'><figcaption><span>vector erase</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">iterator</span> <span class="n">erase</span><span class="p">(</span><span class="n">iterator</span> <span class="n">position</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">position</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">!=</span> <span class="n">end</span><span class="p">())</span>
</span><span class='line'>      <span class="n">copy</span><span class="p">(</span><span class="n">position</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">finish</span><span class="p">,</span> <span class="n">position</span><span class="p">);</span>  <span class="c1">// 后续元素往前移动</span>
</span><span class='line'>  <span class="o">--</span><span class="n">finish</span><span class="p">;</span>
</span><span class='line'>  <span class="n">destroy</span><span class="p">(</span><span class="n">finish</span><span class="p">);</span> <span class="c1">// 一个释放资源的全局函数</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">position</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>由上述代码可以看出vector删除一个元素后所有元素后面的向前移动，然后返回删除后
的当前iterator，从指针上看没有变化，但是其实是返回删除元素的下一个元素的iterator
所以对于此类容器可以如下操作</p>

<figure class='code'><figcaption><span>vector erase</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">Vec</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">itVec</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span> <span class="n">itVec</span> <span class="o">=</span> <span class="n">Vec</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">itVec</span> <span class="o">!=</span> <span class="n">Vec</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">WillDelete</span><span class="p">(</span> <span class="o">*</span><span class="n">itVec</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">itVec</span> <span class="o">=</span> <span class="n">Vec</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span> <span class="n">itVec</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">itList</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意不可以用上述方法二进行操作，因为如果进行++操作，相当于指向删除元素后一个元素的后一个</p>

<h2>总结</h2>

<p>C++的STL通过iterator将container和algorithm分离，并通过functor提供高可定制性。iterator可以看作是一种契约，
algorithm对iterator进行操作，algorithm很难对container进行直接操作，这是因为algorithm对container所知甚少，
一段代码，若未利用操作对象所知全部信息，将难以达到性能之极，并伴随其它种种折中现象。
当然，这种“未知性”是必须的——algorithm对于真正的操作对象container不能做出太多假设，若假设过多，
何来一个algorithm可以作用若干不同container的妙举，STL强大威力也将受损不少</p>

<ul>
<li><p>erase一般作为一个container的成员函数，是真正删除的元素，是物理上的删除</p></li>
<li><p>作为算法部分的remove类函数，是逻辑上的删除，将被删除的元素移动到容器末尾，然后返回新的末尾，此时容器的size不变化</p></li>
<li><p>部分容器提供remove类成员函数，那么代表的是真正物理意义上的删除元素</p></li>
<li><p>如果该容器是vector、string或者deque，使用erase-remove idiom或者erase-remove_if idiom</p></li>
<li><p>如果该容器是list，使用list::remove或者list:remove_if成员函数</p></li>
<li><p>如果该容器是一个associative container，使用asso_con::erase成员函数或者remove_copy_if结合swap等方式</p></li>
<li><p>有一些比较特殊的容器具现，比如vector<bool>等，暂不考虑。</p></li>
</ul>


<h2>参考</h2>

<ol>
<li><a href="http://blog.chinaunix.net/uid-9435177-id-2002677.html">关于C++中STL的erase用法</a></li>
<li><a href="http://www.cnblogs.com/mazhen/archive/2011/12/20/2294548.html">STL中用erase()方法遍历删除元素</a></li>
<li><a href="http://www.cnblogs.com/painful/archive/2011/08/16/2140704.html">C++复习之STL（一）—— ERASE和REMOVE特异行为</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FUSE]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/28/fuse/"/>
    <updated>2012-09-28T13:58:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/28/fuse</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>用户空间文件系统（Filesystem in Userspace，簡稱FUSE）是操作系统中的概念，指完全在用户态实现的文件系统。目前Linux通过内核模块对此进行支持。一些文件系统如ZFS，glusterfs和lustre使用FUSE实现</p>

<p>在用户空间实现文件系统能够大幅提高生产率，简化了为操作系统提供新的文件系统的工作量，特别适用于各种虚拟文件系统和网络文件系统。上述ZFS和glusterfs都属于网络文件系统。但是，在用户态实现文件系统必然会引入额外的内核态/用户态切换带来的开销，对性能会产生一定影响</p>

<p><img src="http://zh.wikipedia.org/wiki/File:FUSE_structure.svg"></p>

<h2>应用举例</h2>

<ul>
<li>ExpanDrive: 商业文件系统，实现了SFTP/FTP/FTPS协议</li>
<li>GlusterFS: 用于集群的分布式文件系统，可以扩展到PB级</li>
<li>SSHFS: 通过SSH协议访问远程文件系统；</li>
<li>GmailFS: 通过文件系统方式访问GMail；</li>
<li>EncFS: 加密的虚拟文件系统</li>
<li>NTFS-3G和Captive NTFS, 在非Windows中对NTFS文件系统提供支持；</li>
<li>WikipediaFS : 支持通过文件系统接口访问Wikipedia上的文章；</li>
<li>升阳公司的Lustre: 和GlusterFS类似但更早的一个集群文件系统</li>
<li>ZFS: Luster的Linux版；</li>
<li>archivemount:</li>
<li>HDFS: Hadoop提供的分布式文件系统。HDFS可以通过一系列命令访问，并不一定经过Linux FUSE</li>
</ul>


<h2>参考</h2>

<ol>
<li><a href="http://zh.wikipedia.org/wiki/FUSE">FUSE wiki</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-fuse/">使用 FUSE 开发自己的文件系统</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux进程管理]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/26/linuxjin-cheng-guan-li/"/>
    <updated>2012-09-26T15:42:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/26/linuxjin-cheng-guan-li</id>
    <content type="html"><![CDATA[<h2>笔记</h2>

<h2>参考</h2>

<ul>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-linux-process-management/">Linux 进程管理剖析</a></li>
<li><a href="http://www.cnblogs.com/hanyan225/archive/2011/07/09/2101962.html">linux内核分析笔记&#8212;-进程管理</a></li>
<li><a href="http://www.cppblog.com/jake1036/archive/2010/10/31/131326.html">LINUX内核之进程管理模块SCHED.C</a></li>
<li><a href="http://timyang.net/linux/linux-process/">了解Linux的进程与线程</a></li>
<li><a href="http://oss.org.cn/kernel-book/ch13/13.6.1.htm">init进程的建</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HBase 安装]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/19/hbase-an-zhuang/"/>
    <updated>2012-09-19T15:58:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/19/hbase-an-zhuang</id>
    <content type="html"><![CDATA[<h2>准备</h2>

<p>需要安装</p>

<ul>
<li>Java sdk并配置<em>JAVA_HOME</em></li>
<li>Hadoop</li>
<li>zookeeper</li>
</ul>


<h2>安装</h2>

<p>下载后解压到指定目录</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tar -xvf hbase-0.94.1.tar.gz
</span><span class='line'><span class="nb">cd </span>hbase-0.94.1
</span></code></pre></td></tr></table></div></figure>


<h2>配置启动</h2>

<p>需要配置hbase保存数据的文件夹，确定用户具有读写权限
编辑<em>conf/hbase-site.xml</em>文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'><span class="nt">&lt;property&gt;</span>
</span><span class='line'><span class="nt">&lt;name&gt;</span>hbase.rootdir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'><span class="nt">&lt;value&gt;</span>file:///DIRECTORY/hbase<span class="nt">&lt;/value&gt;</span>
</span><span class='line'><span class="nt">&lt;/property&gt;</span>
</span><span class='line'><span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 <em>DIRECTORY</em> 为hbase保存数据的文件夹，默认值为 <em>/tmp/hbase-${user.name}</em></p>

<p>启动hbase</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./bin/start-hbase.sh
</span><span class='line'>starting master, logging to /home/hadoop/hbase-0.94.1/bin/../logs/hbase-hadoop-master-localhost.out
</span></code></pre></td></tr></table></div></figure>


<h2>测试</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hadoop@localhost:~/hbase-0.94.1<span class="nv">$ </span>./bin/hbase shell
</span><span class='line'>HBase Shell; enter <span class="s1">&#39;help&lt;RETURN&gt;&#39;</span> <span class="k">for </span>list of supported commands.
</span><span class='line'>Type <span class="s2">&quot;exit&lt;RETURN&gt;&quot;</span> to leave the HBase Shell
</span><span class='line'>Version 0.94.1, r1365210, Tue Jul 24 18:40:10 UTC 2012
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:001:0&gt;
</span></code></pre></td></tr></table></div></figure>


<p>创建表并插入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>hadoop@localhost:~/hbase-0.94.1<span class="nv">$ </span>./bin/hbase shell
</span><span class='line'>HBase Shell; enter <span class="s1">&#39;help&lt;RETURN&gt;&#39;</span> <span class="k">for </span>list of supported commands.
</span><span class='line'>Type <span class="s2">&quot;exit&lt;RETURN&gt;&quot;</span> to leave the HBase Shell
</span><span class='line'>Version 0.94.1, r1365210, Tue Jul 24 18:40:10 UTC 2012
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:001:0&gt; create <span class="s1">&#39;test&#39;</span>,<span class="s1">&#39;cf&#39;</span>
</span><span class='line'>0 row<span class="o">(</span>s<span class="o">)</span> in 4.4750 seconds
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:002:0&gt; list <span class="s1">&#39;test&#39;</span>
</span><span class='line'>TABLE
</span><span class='line'><span class="nb">test                                                                                                                                         </span>
</span><span class='line'>1 row<span class="o">(</span>s<span class="o">)</span> in 0.1360 seconds
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:003:0&gt; put <span class="s1">&#39;test&#39;</span>, <span class="s1">&#39;row1&#39;</span>, <span class="s1">&#39;cf:a&#39;</span>, <span class="s1">&#39;value1&#39;</span>
</span><span class='line'>0 row<span class="o">(</span>s<span class="o">)</span> in 0.3430 seconds
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:004:0&gt; put <span class="s1">&#39;test&#39;</span>, <span class="s1">&#39;row2&#39;</span>, <span class="s1">&#39;cf:b&#39;</span>, <span class="s1">&#39;value2&#39;</span>
</span><span class='line'>0 row<span class="o">(</span>s<span class="o">)</span> in 0.0720 seconds
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:015:0&gt; put <span class="s1">&#39;test&#39;</span>, <span class="s1">&#39;row3&#39;</span>, <span class="s1">&#39;cf:c&#39;</span>, <span class="s1">&#39;value3&#39;</span>
</span><span class='line'>0 row<span class="o">(</span>s<span class="o">)</span> in 0.0250 seconds
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:016:0&gt; scan <span class="s1">&#39;test&#39;</span>
</span><span class='line'>ROW                                  COLUMN+CELL
</span><span class='line'>row1                                <span class="nv">column</span><span class="o">=</span>cf:a, <span class="nv">timestamp</span><span class="o">=</span>1348043456231, <span class="nv">value</span><span class="o">=</span>value1
</span><span class='line'>row2                                <span class="nv">column</span><span class="o">=</span>cf:b, <span class="nv">timestamp</span><span class="o">=</span>1348043476312, <span class="nv">value</span><span class="o">=</span>value2
</span><span class='line'>row3                                <span class="nv">column</span><span class="o">=</span>cf:c, <span class="nv">timestamp</span><span class="o">=</span>1348043612383, <span class="nv">value</span><span class="o">=</span>value3
</span><span class='line'>row<span class="o">(</span>s<span class="o">)</span> in 0.1310 seconds
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:017:0&gt; get <span class="s1">&#39;test&#39;</span>, <span class="s1">&#39;row1&#39;</span>
</span><span class='line'>COLUMN                               CELL
</span><span class='line'> cf:a                                <span class="nv">timestamp</span><span class="o">=</span>1348043456231, <span class="nv">value</span><span class="o">=</span>value1
</span><span class='line'> 1 row<span class="o">(</span>s<span class="o">)</span> in 0.0560 seconds
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:018:0&gt; disable <span class="s1">&#39;test&#39;</span>
</span><span class='line'>0 row<span class="o">(</span>s<span class="o">)</span> in 2.2520 seconds
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:019:0&gt; drop <span class="s1">&#39;test&#39;</span>
</span><span class='line'>0 row<span class="o">(</span>s<span class="o">)</span> in 1.6390 seconds
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:018:0&gt; disable <span class="s1">&#39;test&#39;</span>
</span><span class='line'>0 row<span class="o">(</span>s<span class="o">)</span> in 2.2520 seconds
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:019:0&gt; drop <span class="s1">&#39;test&#39;</span>
</span><span class='line'>0 row<span class="o">(</span>s<span class="o">)</span> in 1.6390 seconds
</span><span class='line'>
</span><span class='line'>hbase<span class="o">(</span>main<span class="o">)</span>:020:0&gt; <span class="nb">exit</span>
</span><span class='line'>hadoop@localhost:~/hbase-0.94.1<span class="nv">$ </span>./bin/stop-hbase.sh
</span><span class='line'>stopping hbase.................
</span><span class='line'>hadoop@localhost:~/hbase-0.94.1<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<h2>备注</h2>

<p>可以查看logs中.log结尾的日志，判断启动问题</p>

<ul>
<li><strong>zookeeper连不上</strong>: 可能就没装，或者2181默认端口被占用</li>
<li><strong>unable create version file on /home/hbase_data</strong>: 保存数据路径不正确</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx Module编写]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/18/nginx-modulebian-xie/"/>
    <updated>2012-09-18T11:13:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/18/nginx-modulebian-xie</id>
    <content type="html"><![CDATA[<h2>模块简介</h2>

<p>nginx 的模块在源码中对应着是<em>ngx_module_t</em>结构的变量，
有一个全局的<em>ngx_module_t</em>指针数组，这个指针数组包含了当前编译版本支持的所有模块，
这个指针数组的定义是在自动脚本生成的<em>objs/ngx_modules.c</em>文件中</p>

<p>nginx启动的过程:</p>

<p>nginx是一个master主进程＋多个worker子进程的工作模式 ,nginx主进程启动的过程中会按照初始化master、初始化模块、初始化工作进程、（
初始化线程、退出线程）、 退出工作进程、退出master顺序进行，而在这些子过程内部和子过程之间，又会有读取配置、创建配置、
初始化配置、合并配置、http解析、http过 滤、http输出、http代理等过程，在这些过程开始前后、过程中、结束前后等时机，
nginx调用合适的模块接口完成特定的任务</p>

<p>所 谓的合适模块接口，是各个模块通过一些方式注册到系统内的回调函数，这些回调函数都要符合一定的接口规范</p>

<h2>Hello World</h2>

<h2>参考</h2>

<p><a href="http://nginx.org/">nginx</a></p>

<p><a href="http://blog.csdn.net/kenbinzhang/article/category/603177">nginx源码分析</a></p>

<p><a href="http://cjhust.blog.163.com/blog/#m=0&amp;t=1&amp;c=fks_084064081084083067086086094095085081084075086081087070083">nginx模块开发</a></p>

<p><a href="http://blog.csdn.net/poechant/article/details/7627828">解剖Nginx·模块开发篇</a></p>

<p><a href="http://www.oschina.net/question/12_4180">Nginx模块开发指南中文版</a></p>

<p><a href="http://www.evanmiller.org/nginx-modules-guide.html">Emiller&#8217;s Guide To Nginx Module Development</a></p>

<p><a href="http://blog.csdn.net/lengzijian/article/details/7598996"> nginx 源码学习笔记</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chrome启动流程]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/17/chromeqi-dong-liu-cheng/"/>
    <updated>2012-09-17T15:44:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/17/chromeqi-dong-liu-cheng</id>
    <content type="html"><![CDATA[<h2>主函数</h2>

<p>在<em>src/chrome/app/</em>中，对应于不同平台存在不同的主函数入口文件，比如</p>

<ul>
<li><em>chrome_exe_main_gtk.cc</em></li>
<li><em>chrmoe_exe_main_win.cc</em></li>
<li><em>chrome_exe_main_mac.cc</em></li>
</ul>


<p>以<em>chrome_exe_main_gtk.cc</em>为例</p>

<figure class='code'><figcaption><span>chrome_exe_main_gtk.cc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;build/build_config.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// The entry point for all invocations of Chromium, browser and renderer. On</span>
</span><span class='line'><span class="c1">// windows, this does nothing but load chrome.dll and invoke its entry point in</span>
</span><span class='line'><span class="c1">// order to make it easy to update the app from GoogleUpdate. We don&#39;t need</span>
</span><span class='line'><span class="c1">// that extra layer with on linux.</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ChromeMain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">ChromeMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中ChromeMain(int,char*[])定义在同一目录下的chrome_main.cc中</p>

<figure class='code'><figcaption><span>chrome_main.cc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;chrome/app/chrome_main_delegate.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;content/public/app/content_main.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(OS_WIN)</span>
</span><span class='line'><span class="cp">#define DLLEXPORT __declspec(dllexport)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We use extern C for the prototype DLLEXPORT to avoid C++ name mangling.</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="n">DLLEXPORT</span> <span class="kt">int</span> <span class="kr">__cdecl</span> <span class="n">ChromeMain</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">instance</span><span class="p">,</span>
</span><span class='line'><span class="n">sandbox</span><span class="o">::</span><span class="n">SandboxInterfaceInfo</span><span class="o">*</span> <span class="n">sandbox_info</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#elif defined(OS_POSIX)</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="n">__attribute__</span><span class="p">((</span><span class="n">visibility</span><span class="p">(</span><span class="s">&quot;default&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ChromeMain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(OS_WIN)</span>
</span><span class='line'><span class="n">DLLEXPORT</span> <span class="kt">int</span> <span class="kr">__cdecl</span> <span class="n">ChromeMain</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">instance</span><span class="p">,</span>
</span><span class='line'><span class="n">sandbox</span><span class="o">::</span><span class="n">SandboxInterfaceInfo</span><span class="o">*</span> <span class="n">sandbox_info</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="n">ChromeMainDelegate</span> <span class="n">chrome_main_delegate</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">content</span><span class="o">::</span><span class="n">ContentMain</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="n">sandbox_info</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">chrome_main_delegate</span><span class="p">);</span>
</span><span class='line'><span class="cp">#elif defined(OS_POSIX)</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ChromeMain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="n">ChromeMainDelegate</span> <span class="n">chrome_main_delegate</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="n">content</span><span class="o">::</span><span class="n">ContentMain</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">chrome_main_delegate</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>ChromeMainDelegate</em>继承自<em>ContentMainDelegate</em>主要提供启动相关函数以及进程
调用处理。其只是将父类函数提供一个简单的实现</p>

<p>其中<em>content::ContentMain(argc, argv, &amp;chrome_main_delegate);</em>
负责主要循环，初始化环境，启动Run函数，退出并返回错误值，其定义如下</p>

<figure class='code'><figcaption><span>content_main.cc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;content/public/app/content_main.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;base/memory/scoped_ptr.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;content/public/app/content_main_runner.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="n">content</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(OS_WIN)</span>
</span><span class='line'><span class="kt">int</span> <span class="n">ContentMain</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">instance</span><span class="p">,</span>
</span><span class='line'>                <span class="n">sandbox</span><span class="o">::</span><span class="n">SandboxInterfaceInfo</span><span class="o">*</span> <span class="n">sandbox_info</span><span class="p">,</span>
</span><span class='line'>                              <span class="n">ContentMainDelegate</span><span class="o">*</span> <span class="n">delegate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ContentMain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span>
</span><span class='line'>                  <span class="k">const</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">,</span>
</span><span class='line'>                                  <span class="n">ContentMainDelegate</span><span class="o">*</span> <span class="n">delegate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#endif  </span><span class="c1">// OS_WIN</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">scoped_ptr</span><span class="o">&lt;</span><span class="n">ContentMainRunner</span><span class="o">&gt;</span> <span class="n">main_runner</span><span class="p">(</span><span class="n">ContentMainRunner</span><span class="o">::</span><span class="n">Create</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>          <span class="kt">int</span> <span class="n">exit_code</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#if defined(OS_WIN)</span>
</span><span class='line'>  <span class="n">exit_code</span> <span class="o">=</span> <span class="n">main_runner</span><span class="o">-&gt;</span><span class="n">Initialize</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="n">sandbox_info</span><span class="p">,</span> <span class="n">delegate</span><span class="p">);</span>
</span><span class='line'><span class="cp">#else</span>
</span><span class='line'>    <span class="n">exit_code</span> <span class="o">=</span> <span class="n">main_runner</span><span class="o">-&gt;</span><span class="n">Initialize</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">delegate</span><span class="p">);</span>
</span><span class='line'><span class="cp">#endif  </span><span class="c1">// OS_WIN</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">exit_code</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">exit_code</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>              <span class="n">exit_code</span> <span class="o">=</span> <span class="n">main_runner</span><span class="o">-&gt;</span><span class="n">Run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">main_runner</span><span class="o">-&gt;</span><span class="n">Shutdown</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>                  <span class="k">return</span> <span class="n">exit_code</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>  <span class="c1">// namespace content</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrommium如何显示网页]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/14/chrommiumru-he-xian-shi-wang-ye/"/>
    <updated>2012-09-14T14:49:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/14/chrommiumru-he-xian-shi-wang-ye</id>
    <content type="html"><![CDATA[<h2>涉及模块</h2>

<ul>
<li>WebKit: html渲染引擎</li>
<li>Glue: 将WebKit的对应类型转化为chromium对应类型，被称为&#8221;Webkit嵌入层&#8221;它是chromium和<em>test_shell</em>(可以测试webkit)的基础</li>
<li>Renderer/Render host: chromium的多进程嵌入层，负责browser进程和render进程间的通知和命令</li>
<li>WebContent: 方便整合多个沙盒进程中渲染html为一个完整的画面</li>
<li>TabContentWrapper： 包含一个完整的WebContent实例，并且包含一个插件接口</li>
<li>Browser：浏览器窗口，包含多个TabContentWrapper</li>
</ul>


<h2>WebKit</h2>

<p>用来渲染web页面，源码位置为<em>/third_party/WebKit</em>。WebKit包含一个&#8221;WebCore&#8221;和一个&#8221;JavaScriptCore&#8221;，后者主要用来测试，一般使用V8对其
替换。&#8221;WebCore&#8221;作为核心渲染引擎，在chromium中并不是像safari一样用&#8221;WebKit&#8221;的原生的接口，只是为了方便称为&#8221;WebKit&#8221;层。</p>

<h3>WebKit Port</h3>

<p>底层包含google实现的基于系统的底层&#8221;port&#8221;，部分代码并不是平台相关的，可以认为是&#8221;WebCore&#8221;的一部分，但是比如字体渲染等操作必须用各个
平台自己的方式。</p>

<ul>
<li><p>网络通信主要是通过chromium的<a href="http://www.chromium.org/developers/design-documents/multi-process-resource-loading">multi-process resource loading</a>
来实现的，而不是由render进程直接通过系统调用来实现</p></li>
<li><p>利用来自android的跨平台图形库Skia渲染除字体外的画面。代码位于 <em>/third_party/skia</em>其入口是<em>/webkit/port/platform/graphics/GraphicsContextSkia.cpp</em></p></li>
</ul>


<h3>WebKit Glue</h3>

<p>Glue为WebKit的类型和接口提供了一层封装(比如用std::string 代替 WebCore::String)，所有的chromium代码基于glue，这样方便统一类型以及风格
并且减少WebKit的类型以及API变动为chromium带来的问题</p>

<p>&#8220;test shell&#8221; 提供了一个原生的调用WebKit的方式，它的调用方式和Chromium通过glue调用WebKit完全一致，可以用来进行测试新代码，减少chromium
架构上许多特性，线程或者进程的干扰。它还可以作为WebKit的一个自动化测试工具。但是&#8221;test shell&#8221; 下行方面和chromium的多进程方式不同，
它在每个shell中单独集成一个&#8221;content shell&#8221;</p>

<h2>Render进程</h2>

<p><img src="http://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome/Renderingintherenderer-v2.png"></p>

<p>render进程基于glue集成webkit port，代码量不大，主要是通过IPC接收主进程的任务。最重要的类是RenderView，位于<em>/content/renderer/render_view_impl.cc</em>
类的对象代表了一个web页面，处理来自主进程的浏览命令，该类继承自RenderWidget，RenderWidget提供了绘制和事件处理接口。RenderView通过
render进程中的RenderProcess对象和主进程交互</p>

<p>RenderWidget实现了glue的一个抽象接口WebWidgetDelegate， 对应于 WebCore::Widget。这是一个基础的显示并处理事件的窗口。RenderView继承自
RenderWidget，并且显示一个tab内的内容或者弹出窗口。对于chromium来说RenderWidget不依赖RenderView存在的唯一情况是web页面的选择窗口。</p>

<h3>render线程</h3>

<p>每个render包含两个线程，其中render  thread运行RenderView和WebKit代码，还有一个main thread负责IPC。render thread和外部通信，首先将
消息发送给render中的main thread，然后交给browser进程。所以它和browser之间可以是同步的</p>

<h2>Browser进程</h2>

<p><img src="http://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome/rendering%20browser.png"></p>

<h3>browser进程的底层处理</h3>

<p>browser分为UI线程和IPC线程，IPC线程负责处理browser和render进程间的通信，并且管理外部网络链接。UI线程一旦创建一个RenderProcessHost
则同时在IPC线程内创建一个新的ChannelProxy IPC对象，render通过该对象内的PIPE通道和UI线程进行通信。该对象内存在ResourceMessageFilter可以处理
网络请求。该功能位于ResourceMessageFilter::OnMessageReceived.</p>

<p>UI线程内的RenderProcessHost对象负责给对应的render发送界面相关消息，该功能位于RenderProcessHost::OnMessageReceived.</p>

<h3>browser进程的高层处理</h3>

<p>和界面相关的消息大部分在RenderViewHost::OnMessageReceived被处理，剩下的发送给RenderWidgetHost基类，对应于render进程内的RenderView and the RenderWidget
各平台都有自己的显示实现(RenderWidgetHostView[Aura|Gtk|Mac|Win])</p>

<p>在RenderView/Widget上层是WebContents对象，多数消息在这一层被函数响应。一个WebContents对应于一个webpage.它是内容模块的最高层。负责显示
标签内的内容，每个WebContents包含于一个TabContentsWrapper内，对应于chrome内的一个tab。</p>

<h2>举例</h2>

<h3>设置光标的流程</h3>

<p><strong>对于render进程来说</strong></p>

<ul>
<li>WebKit内部生成光标设置消息。该消息通过<em>content/renderer/render_widget.cc</em>内的RenderWidget::SetCursor被发出</li>
<li>调用RenderView内的RenderWidget::Send分配该消息，然后通过RenderThread::Send将消息从render进程发送给browser进程</li>
<li>然后调用render进程内的main thread的IPC::SyncChannel，将消息添加到指定的pipe中</li>
</ul>


<p><strong>对于browser进程来说</strong></p>

<ul>
<li>RenderProcessHost内的IPC::ChannelProxy通过IPC线程接收该消息。首先通过ResourceMessageFilter过滤是网络消息还是从底层传来的，由于消息
不是网络消息，没有被过滤，被传送给UI线程</li>
<li><em>content/browser/renderer_host/render_process_host_impl.cc</em>中的RenderProcessHost::OnMessageReceived 接收到该消息，处理几类消息后
将其他消息传送给消息来源的RenderView对应的RenderViewHost。</li>
<li><em>content/browser/renderer_host/render_view_host_impl.cc</em>内的RenderViewHost::OnMessageReceived接收到该消息，许多消息在此被处理，但是
这个消息会继续被传递给RenderWidget</li>
<li><em>content/browser/renderer_host/render_view_host_impl.cc</em>存有消息字典以及对应的处理函数RenderWidgetHost::OnMsgSetCursor，然后被特定的
UI函数处理</li>
</ul>


<h3>鼠标点击的流程</h3>

<p><strong>对于browser进程来说</strong></p>

<ul>
<li>UI线程内的RenderWidgetHostViewWin::OnMouseEvent捕捉到窗口消息，然后调用ForwardMouseEventToRenderer</li>
<li>上个函数将事件打包为跨平台的WebMouseEvent，然后将其发送给对应的RenderWidgetHost</li>
<li>RenderWidgetHost::ForwardInputEvent创建一个IPC消息<em>ViewMsg_HandleInputEvent</em>，将WebInputEvent序列化后放入其中，然后调用RenderWidgetHost::Send.</li>
<li>接着会调用RenderProcessHost::Send将消息发送给对应的IPC::ChannelProxy.</li>
<li>IPC::ChannelProxy.会将消息传给browser进程内的IPC线程 ，然后写入对应的pipe中</li>
</ul>


<p>许多消息在WebContents内创建，比如浏览消息。上面的流程同样适用于这类消息。</p>

<p><strong>对于render进程来说</strong></p>

<ul>
<li>IPC线程（这里写main thread?）上的IPC::Channel 读取到消息，然后通过代理传送给render线程</li>
<li>RenderView::OnMessageReceived获取到消息。很多消息在这里直接被处理了。但是这个消息不能在这里处理，被传递给RenderWidget::OnMessageReceived
然后被RenderWidget::OnHandleInputEvent处理</li>
<li>通过WebWidgetImpl::HandleInputEvent处理该消息，这个函数代替了WebKit内的PlatformMouseEvent,将事件传递给WebKit内的WebCore::Widget</li>
</ul>


<h2>参考</h2>

<ul>
<li><a href="http://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome">How Chromium Displays Web Pages</a></li>
<li><a href="http://www.chromium.org/developers/design-documents/inter-process-communication">Inter-process Communication (IPC)</a></li>
<li><a href="http://www.chromium.org/developers/design-documents/multi-process-resource-loading">Multi-process Resource Loading</a></li>
<li><a href="http://www.chromium.org/developers/content-module">Content module</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Libevent使用]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/11/libeventshi-yong/"/>
    <updated>2012-09-11T13:22:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/11/libeventshi-yong</id>
    <content type="html"><![CDATA[<h2>参考</h2>

<p><a href="http://www.wangafu.net/~nickm/libevent-book/">libevent-book</a>
<a href="http://blog.csdn.net/laoyi19861011/article/details/6534273">libevent参考手册blog</a>
<a href="http://blog.csdn.net/wei801004/article/details/4246635">level triger &amp; edge triger</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chrome多进程架构阅读]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/06/chromeduo-jin-cheng-jia-gou-yue-du/"/>
    <updated>2012-09-06T17:31:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/06/chromeduo-jin-cheng-jia-gou-yue-du</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>关于Chromium多进程架构综述</p>

<h2>多进程架构解决的问题</h2>

<p>很难构建一个不会崩溃和挂起而且绝对安全的渲染器。现代浏览器类似原始的单用户多任务系统
异常操作很容易使得系统崩溃。一个tab错误或者插件错误引起所有的tab崩溃。</p>

<p>对比现代操作系统，其强壮性是通过分离不同任务在不同的进程中来实现的。而且不同用户
只能访问本用户的数据。</p>

<p>所以我们可以用类似的方式来实现浏览器的架构。</p>

<h2>架构概览</h2>

<p>Chromium将不同的tabs通过不同的进程处理来保证其崩溃不会影响其他部分。并且严格限制
每个tab对于内存的访问。</p>

<p>运行UI，管理以及插件的进程称为<em>browser process</em> or <em>browser</em></p>

<p>每个tab运行的进程称为<em>render processes</em> or <em>renderers</em></p>

<p><em>renderers</em>利用<em>WebKit</em>解析渲染<em>HTML</em></p>

<p><img src="http://www.chromium.org/developers/design-documents/multi-process-architecture/arch.png?attredirects=0"></p>

<h3>管理进程</h3>

<p>每个渲染进程都有一个全局的<em>RenderProcess</em>对象。负责和<em>browser</em>交互。<em>browser</em>对应保存
一个<em>RenderProcessHost</em>管理状态和通信</p>

<h3>管理渲染</h3>

<p>每个渲染进程有一个或者多个被<em>RenderProcess</em>管理的<em>RenderView</em>实例，每个实例对应一个tab
在<em>browser</em>里的<em>RenderProcessHost</em>持有多个<em>RenderViewHost</em>。每个均有不同的ID。browser和特定
tab的通信靠<em>RenderViewHost</em>对象来实现，它通过<em>RenderProcessHost</em>将消息发送给<em>RenderProcess</em>内的<em>RenderView</em></p>

<h2>模块及接口</h2>

<p>渲染进程内</p>

<ul>
<li>渲染进程内是<em>RenderProcess</em>处理IPC消息，<em>browser</em>内是<em>RenderProcessHost</em></li>
<li><em>RenderView</em>和对应的<em>RenderViewHost</em>以及<em>WebKit</em>嵌入层进行通信。</li>
</ul>


<p>浏览进程内</p>

<ul>
<li><em>Browser</em>是一个顶层的浏览窗口</li>
<li><em>RenderProcessHost</em>是浏览进程和渲染进程IPC通信的实例</li>
<li><em>RenderViewHost</em>封装了和<em>RenderView</em>的通信。</li>
</ul>


<p>细节参见<a href="http://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome">How Chromium displays web pages </a></p>

<h2>共享渲染进程</h2>

<p>一般来说，每个tab都是在一个新进程中打开。但是某些时候需要多个tab共享一个渲染进程。
比如打开一个需要进行同步操作的web应用（JavaScript中的window.open）</p>

<h2>渲染进程崩溃检测</h2>

<p><em>browser</em>进程监控所有IPC链接，一旦发现某个链接断开，那么认为该渲染进程崩溃。目前处理崩溃的方式是显示一个通知崩溃
的页面</p>

<h2>渲染进程沙盒化</h2>

<p>因为<em>WebKit</em>单独运行在一个进程里，我们可以控制其如何访问以及访问哪些系统资源。比如渲染进程访问网络只能通过主进程进行访问。
另外可以控制其访问用户显示及相关对象。一旦用户打开一个新窗口或者捕捉按将，因为渲染进程都是独立的，那么不会产生错误的显示。</p>

<h2>内存管理</h2>

<p>主要在低内存的情况下，提高顶层tab的响应速度。主要通过降低没有顶层tab的<em>RenderProcess</em>的<em>Working set</em>的大小。提高切换速度。</p>

<h2>参考</h2>

<p><a href="http://www.chromium.org/developers/design-documents/multi-process-architecture">Multi-process Architecture</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c++的Traits技术]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/09/06/c-plus-plus-de-traitsji-zhu/"/>
    <updated>2012-09-06T13:58:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/09/06/c-plus-plus-de-traitsji-zhu</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>traits是一种特性萃取技术,它在Generic Programming中被广泛运用,常常被用于使不同的类型可以用于相同的操作,或者针对不同类型提供不同的实现
类型和类型的特性本是耦合在一起，通过traits技巧就可以将两者解耦。从某种意思上说traits方法也是对类型的特性做了泛化的工作，通过traits提供的类型特性是泛化的类型特性</p>

<h2>例子</h2>

<h3>Example 1</h3>

<p>traits在实现过程中往往需要用到以下三种C++的基本特性</p>

<ul>
<li>enum</li>
<li>typedef</li>
<li>template (partial) specialization</li>
</ul>


<p><em>enum</em>用于将在不同类型间变化的标示统一成一个,它在C++中常常被用于在类中替代<em>define</em>,你可以称<em>enum</em>为类中的<em>define</em>;
<em>typedef</em>则用于定义你的模板类支持特性的形式,你的模板类必须以某种形式支持某一特性,否则类型萃取器<em>traits</em>将无法正常工作.看到这里你可能会想,太苛刻了吧?
其实不然,不支持某种特性本身也是一种支持的方式(见示例2,我们定义了两种标示, <em>__xtrue_type</em>和 <em>__xfalse_type</em>,分别表示对某特性支持和不支持).
<em>template (partial) specialization</em>被用于提供针对特定类型的正确的或更合适的版本.
借助以上几种简单技术,我们可以利用<em>traits</em>提取类中定义的特性,并根据不同的特性提供不同的实现.你可以将从特性的定义到萃取,再到<em>traits</em>的实际使用统称为<em>traits</em>技术,但这种定义使得<em>traits</em>显得过于复杂,
我更愿意将traits的定义限于特性萃取,因为这种定义使得traits显得更简单,更易于理解</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CComplexObject</span> <span class="c1">// a demo class</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="kt">void</span> <span class="n">clone</span><span class="p">()</span> <span class="p">{</span> <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;in clone&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Solving the problem of choosing method to call by inner traits class</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isClonable</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">XContainer</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="k">enum</span> <span class="p">{</span><span class="n">Clonable</span> <span class="o">=</span> <span class="n">isClonable</span><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="kt">void</span> <span class="n">clone</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">pObj</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Traits</span><span class="o">&lt;</span><span class="n">isClonable</span><span class="o">&gt;</span><span class="p">().</span><span class="n">clone</span><span class="p">(</span><span class="n">pObj</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">template</span> <span class="o">&lt;</span><span class="kt">bool</span> <span class="n">flag</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="k">class</span> <span class="nc">Traits</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">template</span> <span class="o">&lt;&gt;</span>
</span><span class='line'>          <span class="k">class</span> <span class="nc">Traits</span><span class="o">&lt;</span><span class="kc">true</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">public</span><span class="o">:</span>
</span><span class='line'>                  <span class="kt">void</span> <span class="n">clone</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">pObj</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;before cloning Clonable type&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>                      <span class="n">pObj</span><span class="o">-&gt;</span><span class="n">clone</span><span class="p">();</span>
</span><span class='line'>                      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;after cloning Clonable type&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">template</span> <span class="o">&lt;&gt;</span>
</span><span class='line'>          <span class="k">class</span> <span class="nc">Traits</span><span class="o">&lt;</span><span class="kc">false</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="k">public</span><span class="o">:</span>
</span><span class='line'>                  <span class="kt">void</span> <span class="n">clone</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">pObj</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">{</span>
</span><span class='line'>                      <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;cloning non Clonable type&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span><span class="o">*</span> <span class="n">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">CComplexObject</span><span class="o">*</span> <span class="n">p2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">XContainer</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kc">false</span><span class="o">&gt;</span> <span class="n">n1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">XContainer</span><span class="o">&lt;</span><span class="n">CComplexObject</span><span class="p">,</span> <span class="kc">true</span><span class="o">&gt;</span> <span class="n">n2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">n1</span><span class="p">.</span><span class="n">clone</span><span class="p">(</span><span class="n">p1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">n2</span><span class="p">.</span><span class="n">clone</span><span class="p">(</span><span class="n">p2</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出：</p>

<p>doing something non Clonable
before doing something Clonable
in clone
after doing something Clonable</p>

<p><a href="http://www.cppblog.com/woaidongmao/archive/2008/11/09/66387.html">Traits初探</a></p>

<h3>Example 2</h3>

<p><img src="http://p.blog.csdn.net/images/p_blog_csdn_net/sanlongcai/333954/o_type_traits.JPG"></p>

<p>从图中可看出算法destroy不必关心具体的类型特性traits，client不用关心具体的destroy。destroy概念上存在的基类是通过参数多态实现的，traits概念上存在的基类是通过<em>type_traits</em>编程方法实现的。
另外得注意的是STL中的iterator相关<em>type_traits</em>的使用跟这里所说的有点不同，如果把类型特性从类中剥离出来看待，那就完全相同了。如何剥离，遇到<em>type_traits</em>相关的含有类型特性的类只看成是类型特性，跟类型特性无关的全都忽略掉</p>

<figure class='code'><figcaption><span>my_type_traits.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef MY_TYPE_TRAITS_H</span>
</span><span class='line'><span class="cp">#define MY_TYPE_TRAITS_H</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">my_true_type</span> <span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">my_false_type</span> <span class="p">{</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">my_type_traits</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">my_false_type</span> <span class="n">has_trivial_destructor</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span><span class="o">&lt;&gt;</span> <span class="k">struct</span> <span class="n">my_type_traits</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">my_true_type</span> <span class="n">has_trivial_destructor</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>my_destruct.h</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef MY_DESTRUCT_H</span>
</span><span class='line'><span class="cp">#define MY_DESTRUCT_H</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;my_type_traits.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T1</span><span class="p">,</span> <span class="k">class</span> <span class="nc">T2</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">void</span> <span class="n">myconstruct</span><span class="p">(</span><span class="n">T1</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="k">const</span> <span class="n">T2</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">new</span> <span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="n">T1</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">void</span> <span class="n">mydestroy</span><span class="p">(</span><span class="n">T</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="k">typename</span> <span class="n">my_type_traits</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">has_trivial_destructor</span> <span class="n">trivial_destructor</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_mydestroy</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">trivial_destructor</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">void</span> <span class="n">_mydestroy</span><span class="p">(</span><span class="n">T</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="n">my_true_type</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; do the trivial destructor &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">void</span> <span class="n">_mydestroy</span><span class="p">(</span><span class="n">T</span> <span class="o">*</span><span class="n">p</span><span class="p">,</span> <span class="n">my_false_type</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; do the real destructor &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span><span class="o">-&gt;~</span><span class="n">T</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>test_type_traits.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &quot;my_destruct.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">;</span>
</span><span class='line'><span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestClass</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>      <span class="n">TestClass</span><span class="p">()</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;TestClass constructor call&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>          <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">TestClass</span><span class="p">(</span><span class="k">const</span> <span class="n">TestClass</span><span class="o">&amp;</span> <span class="n">test_class</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;TestClass copy constructor call. copy data:&quot;</span>
</span><span class='line'>              <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="p">(</span><span class="n">test_class</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>          <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">;</span>
</span><span class='line'>          <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">test_class</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="o">~</span><span class="n">TestClass</span><span class="p">()</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;TestClass destructor call. delete the data:&quot;</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>          <span class="k">delete</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>      <span class="kt">int</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">TestClass</span> <span class="o">*</span><span class="n">test_class_buf</span><span class="p">;</span>
</span><span class='line'>      <span class="n">TestClass</span> <span class="n">test_class</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">test_class_buf</span> <span class="o">=</span> <span class="p">(</span><span class="n">TestClass</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">TestClass</span><span class="p">));</span>
</span><span class='line'>      <span class="n">myconstruct</span><span class="p">(</span><span class="n">test_class_buf</span><span class="p">,</span> <span class="n">test_class</span><span class="p">);</span>
</span><span class='line'>      <span class="n">mydestroy</span><span class="p">(</span><span class="n">test_class_buf</span><span class="p">);</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">test_class_buf</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">int</span> <span class="o">*</span><span class="n">int_p</span><span class="p">;</span>
</span><span class='line'>      <span class="n">int_p</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">;</span>
</span><span class='line'>      <span class="n">mydestroy</span><span class="p">(</span><span class="n">int_p</span><span class="p">);</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">int_p</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://blog.csdn.net/sanlongcai/article/details/1786647">type traits 之&#8221;本质论&#8221;</a></p>

<h3>Example 3</h3>

<p>首先假如有以下一个泛型的迭代器类，其中类型参数 T 为迭代器所指向的类型</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">myIterator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="p">...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>当我们使用myIterator时，怎样才能获知它所指向的元素的类型呢？我们可以为这个类加入一个内嵌类型，像这样</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">myIterator</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="k">typedef</span>  <span class="n">T</span> <span class="n">value_type</span><span class="p">;</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样当我们使用myIterator类型时，可以通过 myIterator::value_type来获得相应的myIterator所指向的类型。</p>

<p>现在我们来设计一个算法，使用这个信息。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">typename</span> <span class="n">myIterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">value_type</span> <span class="n">Foo</span><span class="p">(</span><span class="n">myIterator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们定义了一个函数Foo，它的返回为为  参数i 所指向的类型，也就是T，那么我们为什么还要兴师动众的使用那个value_type呢？ 那是因为，当我们希望修改Foo函数，使它能够适应所有类型的迭代器时，我们可以这样写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">I</span><span class="o">&gt;</span> <span class="c1">//这里的I可以是任意类型的迭代器</span>
</span><span class='line'><span class="k">typename</span> <span class="n">I</span><span class="o">::</span><span class="n">value_type</span> <span class="n">Foo</span><span class="p">(</span><span class="n">I</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在，任意定义了 value_type内嵌类型的迭代器都可以做为Foo的参数了，并且Foo的返回值的类型将与相应迭代器所指的元素的类型一致。至此一切问题似乎都已解决，我们并没有使用任何特殊的技术。然而当考虑到以下情况时，新的问题便显现出来了：</p>

<p>原生指针也完全可以做为迭代器来使用，然而我们显然没有办法为原生指针添加一个value_type的内嵌类型，如此一来我们的Foo()函数就不能适用原生指针了，这不能不说是一大缺憾。那么有什么办法可以解决这个问题呢？ 此时便是我们的主角：类型信息榨取机 Traits 登场的时候了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Traits</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="k">typedef</span> <span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">value_type</span> <span class="n">value_type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">I</span><span class="o">&gt;</span> <span class="c1">//这里的I可以是任意类型的迭代器</span>
</span><span class='line'><span class="k">typename</span> <span class="n">Traits</span><span class="o">&lt;</span><span class="n">I</span><span class="o">&gt;::</span><span class="n">value_type</span> <span class="n">Foo</span><span class="p">(</span><span class="n">I</span> <span class="n">i</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>偏特化原生指针</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Traits</span><span class="o">&lt;</span><span class="n">T</span><span class="o">*&gt;</span> <span class="c1">//注意 这里针对原生指针进行了偏特化</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="k">typedef</span> <span class="k">typename</span> <span class="n">T</span> <span class="n">value_type</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>test.cpp</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">int</span> <span class="o">*</span> <span class="n">p</span><span class="p">;</span>
</span><span class='line'><span class="p">....</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.cnblogs.com/Hush/archive/2004/03/10/2717.html">C++ Traits</a></p>

<h2>参考</h2>

<p><a href="http://www.pleee.com/archives/277.html">C++之traits小记</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx源码阅读]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/08/29/nginxyuan-ma-yue-du/"/>
    <updated>2012-08-29T11:16:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/08/29/nginxyuan-ma-yue-du</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>nginx [engine x]是Igor Sysoev编写的一个HTTP和反向代理服务器，另外它也可以作为邮件代理服务器。 它从2004开始已经在众多流量很大的俄罗斯网站上使用，包括Yandex、Mail.Ru、VKontakte，以及Rambler。据Netcraft统计，在2011年10月份，世界上最繁忙的网站中有7.84%使用Nginx作为其服务器或者代理服务器。部分成功案例请见：FastMail.FM， Wordpress.com。</p>

<p>Nginx的源码使用的许可为两条款类BSD协议。</p>

<ul>
<li>一个主进程和多个工作进程，工作进程以非特权用户运行；</li>
<li>支持的事件机制：<em>kqueue（FreeBSD 4.1+）、epoll（Linux 2.6+）、rt signals（Linux 2.2.19+）、/dev/poll（Solaris 7 11/99+）、event ports（Solaris 10）、select</em>以及<em>poll</em>；</li>
<li>众多支持的kqueue特性包括<em>EV_CLEAR、EV_DISABLE</em>（临时禁止事件）、<em>NOTE_LOWAT、EV_EOF</em>，可用数据的数量，错误代码；</li>
<li>支持<em>sendfile（FreeBSD 3.1+, Linux 2.2+, Mac OS X 10.5）、sendfile64（Linux 2.4.21+）</em>和<em>sendfilev（Solaris 8 7/01+）</em>；</li>
<li>文件<em>AIO（FreeBSD 4.3+, Linux 2.6.22+）</em>；</li>
<li><em>Accept-filters（FreeBSD 4.1+）</em>和 <em>TCP_DEFER_ACCEPT（Linux 2.4+）</em>；</li>
<li>10000个非活跃的HTTP keep-alive连接仅占用约2.5M内存；</li>
<li>尽可能避免数据拷贝操作</li>
</ul>


<h2>参考</h2>

<ol>
<li><a href="http://nginx.org/">Nginx官网</a></li>
<li><a href="http://code.google.com/p/nginxsrp/wiki/NginxCodeReview">nginxsrp</a></li>
<li><a href="http://www.evanmiller.org/nginx-modules-guide.html">nginx module from emiller</a></li>
<li><a href="http://blog.csdn.net/livelylittlefish/article/details/6571497">csdn blog one</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome 下载编译]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/08/28/chrome-xia-zai-bian-yi/"/>
    <updated>2012-08-28T10:33:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/08/28/chrome-xia-zai-bian-yi</id>
    <content type="html"><![CDATA[<h2>安装依赖并获取代码</h2>

<ol>
<li>确认可以解压.tgz类型的文件</li>
<li>下载代码<a href="http://chromium-browser-source.commondatastorage.googleapis.com/chromium_tarball.html">source tarball</a></li>
<li>确认代码放置的分区空间足够</li>
<li>解压代码</li>
<li>安装<a href="http://www.chromium.org/developers/how-tos/install-depot-tools"><em>depot_tools</em></a></li>
<li><p>如果是ubuntu系统需要运行下面</p>

<p> <code>bash
 $cd /path/to/chromium/src
 $sudo ./build/install-build-deps.sh
</code></p></li>
<li><p>更新代码</p>

<p> <code>bash
 $ gclient sync --force
</code></p></li>
</ol>


<p>具体参见<a href="http://www.chromium.org/developers/how-tos/get-the-code">Get the code</a></p>

<h2>安装clang依赖</h2>

<p>因为chrome编译很慢，这里尝试利用clang加快编译速度以及提高编译质量</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$tools</span>/clang/scripts/update.sh
</span></code></pre></td></tr></table></div></figure>


<h2>编译</h2>

<h3>gcc</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$.</span>/build/gyp_chromium
</span><span class='line'><span class="nv">$make</span> chrome -j4
</span></code></pre></td></tr></table></div></figure>


<h3>clang</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$GYP_GENERATORS</span><span class="o">=</span>ninja <span class="nv">GYP_DEFINES</span><span class="o">=</span><span class="nv">clang</span><span class="o">=</span>1 ./build/gyp_chromium
</span><span class='line'><span class="nv">$ninja</span> -C out/Debug chrome <span class="c">#fast</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$GYP_GENERATORS</span><span class="o">=</span>make <span class="nv">GYP_DEFINES</span><span class="o">=</span><span class="nv">clang</span><span class="o">=</span>1 ./build/gyp_chromium
</span><span class='line'><span class="nv">$make</span> chrome -j4  <span class="c"># 4: Number of cores, change accordingly</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://code.google.com/p/chromium/wiki/Clang">chrome clang</a></p>

<h2>问题</h2>

<p><strong>nacl超时</strong></p>

<p>在进行更新代码操作时可能会遇到</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>download_nacl_toolchain.py  timeout
</span></code></pre></td></tr></table></div></figure>


<p>如果没有下载完就进行编译，可能会遇到</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>LASTCHANGE is needed
</span></code></pre></td></tr></table></div></figure>


<p>这样的错误。</p>

<p>需要尝试重新更新代码</p>

<p>或者在build/common.gyi中将<em>&#8216;disable_nacl%&#8217;%: 0</em>置为1(这种方法是官网在编译
chrome os时超时的解决办法，未经尝试)</p>

<p><strong>webkit的svn超时</strong></p>

<p>一种方法：如果不需要webkit中的layouttest可以在.gclient中将其注销</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">solutions</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'><span class="o">{</span> <span class="s2">&quot;name&quot;</span>        : <span class="s2">&quot;src&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;url&quot;</span>         : <span class="s2">&quot;https://src.chromium.org/chrome/trunk/src&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;deps_file&quot;</span>   : <span class="s2">&quot;DEPS&quot;</span>,
</span><span class='line'>  <span class="s2">&quot;managed&quot;</span>     : True,
</span><span class='line'>  <span class="s2">&quot;custom_deps&quot;</span> : <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;src/third_party/WebKit/LayoutTests&quot;</span>: None,
</span><span class='line'>      <span class="s2">&quot;src/content/test/data/layout_tests/LayoutTests&quot;</span>: None,
</span><span class='line'>      <span class="s2">&quot;src/chrome_frame/tools/test/reference_build/chrome&quot;</span>: None,
</span><span class='line'>      <span class="s2">&quot;src/chrome_frame/tools/test/reference_build/chrome_win&quot;</span>: None,
</span><span class='line'>      <span class="s2">&quot;src/chrome/tools/test/reference_build/chrome&quot;</span>: None,
</span><span class='line'>      <span class="s2">&quot;src/chrome/tools/test/reference_build/chrome_linux&quot;</span>: None,
</span><span class='line'>      <span class="s2">&quot;src/chrome/tools/test/reference_build/chrome_mac&quot;</span>: None,
</span><span class='line'>      <span class="s2">&quot;src/chrome/tools/test/reference_build/chrome_win&quot;</span>: None,
</span><span class='line'>  <span class="o">}</span>,
</span><span class='line'>  <span class="s2">&quot;safesync_url&quot;</span>: <span class="s2">&quot;&quot;</span>,
</span><span class='line'><span class="o">}</span>,
</span><span class='line'>  <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>另一种方法：可以人工下载webkit然后将其替换到chrome工程中去。</p>

<h2>参考</h2>

<p><a href="http://www.chromium.org/Home">Chromium Project</a>
<a href="http://code.google.com/p/chromium/wiki/Clang">chrome clang</a>
<a href="http://www.chromium.org/developers/how-tos/get-the-code">Get the code</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[切分字符串]]></title>
    <link href="http://windfire-cd.github.com/blog/2012/08/22/qie-fen-zi-fu-chuan/"/>
    <updated>2012-08-22T17:31:00+08:00</updated>
    <id>http://windfire-cd.github.com/blog/2012/08/22/qie-fen-zi-fu-chuan</id>
    <content type="html"><![CDATA[<h2>切分字符串</h2>

<p>对于切分一个字符串的问题，是比较基础而且经常遇到的问题，下面就3种语言的实现方式
做一个比较</p>

<h2>C++</h2>

<p>c++的方式，包括c没有在标准库中提供这样的一个函数。因此有很多第三方库或者
灵活运用标准库的方法</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;boost/algorithm/string.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">boost</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;a,b, c ,,e,f,&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">fields</span><span class="p">;</span>
</span><span class='line'>  <span class="n">split</span><span class="p">(</span> <span class="n">fields</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">is_any_of</span><span class="p">(</span> <span class="s">&quot;,&quot;</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boost还支持正则表达式的方式切分字符串</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;one-&gt;two-&gt;thirty-four&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">vector</span> <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">fields</span><span class="p">;</span>
</span><span class='line'><span class="n">split_regex</span><span class="p">(</span> <span class="n">fields</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">regex</span><span class="p">(</span> <span class="s">&quot;-&gt;&quot;</span> <span class="p">)</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>同时Boost Tokenizer库也可以完成这种工作。具体参见<a href="http://www.boost.org/libs/tokenizer/index.html"> Boost.Tokenizer</a></p>

<h3>QT</h3>

<p>QT中的<a href="http://developer.qt.nokia.com/doc/qstring.html">QString</a>可以完成unicode方式的解析
具体参见<a href="http://developer.qt.nokia.com/doc/qstring.html#split"> QString::split()</a></p>

<h3>GNU</h3>

<p>在glib中有相应的切分函数</p>

<ul>
<li><a href="http://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strsplit"><em>g_strsplit()</em></a></li>
<li><a href="http://developer.gnome.org/glib/stable/glib-String-Utility-Functions.html#g-strsplit-set"><em>g_strsplit_set()</em></a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;,,three,,five,,&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span><span class="o">**</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">g_strsplit</span><span class="p">(</span> <span class="n">s</span><span class="p">,</span> <span class="sc">&#39;,&#39;</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">char</span><span class="o">**</span> <span class="n">field</span> <span class="o">=</span> <span class="n">fields</span><span class="p">;</span> <span class="n">field</span><span class="p">;</span> <span class="o">++</span><span class="n">field</span><span class="p">,</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">%s</span><span class="se">\&quot;\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">field</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">g_strfreev</span><span class="p">(</span> <span class="n">fields</span> <span class="p">);</span>
</span><span class='line'><span class="n">fields</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>stl::iostream</h3>

<p>可以用std::getline()函数根据不同的切分符来分割行</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;string, to, split&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">istringstream</span> <span class="n">ss</span><span class="p">(</span> <span class="n">s</span> <span class="p">);</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">ss</span><span class="p">.</span><span class="n">eof</span><span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">x</span><span class="p">;</span>               <span class="c1">// here&#39;s a nice, empty string</span>
</span><span class='line'>      <span class="n">getline</span><span class="p">(</span> <span class="n">ss</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="sc">&#39;,&#39;</span> <span class="p">);</span>  <span class="c1">// try to read the next field into it</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">x</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>      <span class="c1">// print it out, even if we already hit EOF</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>std::string</h3>

<p>可以利用std::string中的<em>find_first_of()</em>函数循环处理字符串</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;string, to, split&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">string</span> <span class="n">delimiters</span> <span class="o">=</span> <span class="s">&quot; ,&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">size_t</span> <span class="n">current</span><span class="p">;</span>
</span><span class='line'><span class="kt">size_t</span> <span class="n">next</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="n">next</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="n">next</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="n">find_first_of</span><span class="p">(</span> <span class="n">delimiters</span><span class="p">,</span> <span class="n">current</span> <span class="p">);</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">s</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span> <span class="n">current</span><span class="p">,</span> <span class="n">next</span> <span class="o">-</span> <span class="n">current</span> <span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">next</span> <span class="o">!=</span> <span class="n">string</span><span class="o">::</span><span class="n">npos</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外还有其他非主流方式，参见参考1</p>

<h2>Java</h2>

<p>相对c/c++来说，java的标准库要强大很多，比如split函数就是string里面的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">string</span> <span class="n">s</span><span class="o">=</span><span class="n">abcdeabcdeabcde</span><span class="o">;</span>
</span><span class='line'><span class="n">string</span><span class="o">[]</span> <span class="n">sArray</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="na">Split</span><span class="o">(</span><span class="sc">&#39;c&#39;</span><span class="o">)</span> <span class="o">;</span>
</span><span class='line'><span class="n">foreach</span><span class="o">(</span><span class="n">string</span> <span class="n">i</span> <span class="n">in</span> <span class="n">sArray</span><span class="o">)</span>
</span><span class='line'><span class="n">Console</span><span class="o">.</span><span class="na">WriteLine</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">ToString</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以按照字符串分割</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">string</span> <span class="n">s</span><span class="o">=</span><span class="s">&quot;abcdeabcdeabcde&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">string</span><span class="o">[]</span> <span class="n">sArray1</span><span class="o">=</span><span class="n">s</span><span class="o">.</span><span class="na">Split</span><span class="o">(</span><span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="mi">3</span><span class="o">]{</span><span class="sc">&#39;c&#39;</span><span class="o">,</span><span class="sc">&#39;d&#39;</span><span class="o">,</span><span class="sc">&#39;e&#39;</span><span class="o">})</span> <span class="o">;</span>
</span><span class='line'><span class="n">foreach</span><span class="o">(</span><span class="n">string</span> <span class="n">i</span> <span class="n">in</span> <span class="n">sArray1</span><span class="o">)</span>
</span><span class='line'><span class="n">Console</span><span class="o">.</span><span class="na">WriteLine</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">ToString</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>正则表达式也是支持的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">string</span> <span class="n">content</span><span class="o">=</span><span class="n">agcsmallmacsmallgggsmallytx</span><span class="o">;</span>
</span><span class='line'><span class="n">string</span><span class="o">[]</span><span class="n">resultString</span><span class="o">=</span><span class="n">Regex</span><span class="o">.</span><span class="na">Split</span><span class="o">(</span><span class="n">content</span><span class="o">,</span><span class="n">small</span><span class="o">,</span><span class="n">RegexOptions</span><span class="o">.</span><span class="na">IgnoreCase</span><span class="o">)</span>
</span><span class='line'><span class="n">foreach</span><span class="o">(</span><span class="n">string</span> <span class="n">i</span> <span class="n">in</span> <span class="n">resultString</span><span class="o">)</span>
</span><span class='line'><span class="n">Console</span><span class="o">.</span><span class="na">WriteLine</span><span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">ToString</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Python</h2>

<p>类似java，python的字符串分割也是内置的函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='py'><span class='line'><span class="nb">str</span> <span class="o">=</span> <span class="s">&#39;a,b,c,d&#39;</span>
</span><span class='line'><span class="n">strlist</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span> <span class="c"># 用逗号分割str字符串，并保存到列表</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://www.cplusplus.com/faq/sequences/strings/split/">Split a string</a>
<a href="http://stackoverflow.com/questions/236129/splitting-a-string-in-c">Splitting a string in C++</a>
<a href="http://docs.python.org/library/string.html">python string</a></p>
]]></content>
  </entry>
  
</feed>
